webpackHotUpdate_N_E("pages/component/logo/documentation",{

/***/ "./components/PropTable.tsx":
/*!**********************************!*\
  !*** ./components/PropTable.tsx ***!
  \**********************************/
/*! exports provided: HeadingType, readmeDepthMap, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HeadingType\", function() { return HeadingType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"readmeDepthMap\", function() { return readmeDepthMap; });\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"../node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"../node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/css */ \"../node_modules/@emotion/css/dist/emotion-css.esm.js\");\n/* harmony import */ var _leafygreen_ui_card__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @leafygreen-ui/card */ \"../packages/card/dist/esm/index.js\");\n/* harmony import */ var _leafygreen_ui_table__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @leafygreen-ui/table */ \"../packages/table/dist/esm/index.js\");\n/* harmony import */ var _leafygreen_ui_typography__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @leafygreen-ui/typography */ \"../packages/typography/dist/esm/index.js\");\n/* harmony import */ var _leafygreen_ui_hooks__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @leafygreen-ui/hooks */ \"../packages/hooks/dist/esm/index.js\");\n/* harmony import */ var _leafygreen_ui_tokens__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @leafygreen-ui/tokens */ \"../packages/tokens/dist/esm/index.js\");\n/* harmony import */ var components_PropDefinition__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! components/PropDefinition */ \"./components/PropDefinition.tsx\");\n/* harmony import */ var components_TypographyPropTable__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! components/TypographyPropTable */ \"./components/TypographyPropTable.tsx\");\n/* harmony import */ var utils_formatType__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! utils/formatType */ \"./utils/formatType.tsx\");\n/* harmony import */ var utils_mediaQuery__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! utils/mediaQuery */ \"./utils/mediaQuery.ts\");\n/* harmony import */ var styles_constants__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! styles/constants */ \"./styles/constants.ts\");\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @emotion/react */ \"../node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n\n\nvar _jsxFileName = \"/Users/davemccarthy/Repositories/MongoDB/leafygreen-ui/website/components/PropTable.tsx\",\n    _readmeDepthMap,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar tableWrapper =\n/*#__PURE__*/\n\n/*#__PURE__*/\nObject(_emotion_css__WEBPACK_IMPORTED_MODULE_2__[\"css\"])(Object(utils_mediaQuery__WEBPACK_IMPORTED_MODULE_11__[\"mq\"])({\n  marginLeft: ['-24px', 'unset'],\n  marginRight: ['-24px', 'unset'],\n  overflow: ['hidden', 'unset'],\n  width: ['inherit', 'inherit', 'inherit', \"\".concat(styles_constants__WEBPACK_IMPORTED_MODULE_12__[\"pageContainerWidth\"].dataGraphic, \"px\")]\n}), \";\" + (false ? undefined : \";label:tableWrapper;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZlbWNjYXJ0aHkvUmVwb3NpdG9yaWVzL01vbmdvREIvbGVhZnlncmVlbi11aS93ZWJzaXRlL2NvbXBvbmVudHMvUHJvcFRhYmxlLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFjd0IiLCJmaWxlIjoiL1VzZXJzL2RhdmVtY2NhcnRoeS9SZXBvc2l0b3JpZXMvTW9uZ29EQi9sZWFmeWdyZWVuLXVpL3dlYnNpdGUvY29tcG9uZW50cy9Qcm9wVGFibGUudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2Nzcyc7XG5pbXBvcnQgQ2FyZCBmcm9tICdAbGVhZnlncmVlbi11aS9jYXJkJztcbmltcG9ydCB7IFRhYmxlLCBUYWJsZUhlYWRlciwgUm93LCBDZWxsIH0gZnJvbSAnQGxlYWZ5Z3JlZW4tdWkvdGFibGUnO1xuaW1wb3J0IHsgU3VidGl0bGUsIElubGluZUNvZGUgfSBmcm9tICdAbGVhZnlncmVlbi11aS90eXBvZ3JhcGh5JztcbmltcG9ydCB7IE9uZU9mIH0gZnJvbSAnQGxlYWZ5Z3JlZW4tdWkvbGliJztcbmltcG9ydCB7IHVzZVZpZXdwb3J0U2l6ZSB9IGZyb20gJ0BsZWFmeWdyZWVuLXVpL2hvb2tzJztcbmltcG9ydCB7IGJyZWFrcG9pbnRzIH0gZnJvbSAnQGxlYWZ5Z3JlZW4tdWkvdG9rZW5zJztcbmltcG9ydCBQcm9wRGVmaW5pdGlvbiBmcm9tICdjb21wb25lbnRzL1Byb3BEZWZpbml0aW9uJztcbmltcG9ydCBUeXBvZ3JhcGh5UHJvcFRhYmxlIGZyb20gJ2NvbXBvbmVudHMvVHlwb2dyYXBoeVByb3BUYWJsZSc7XG5pbXBvcnQgZm9ybWF0VHlwZSBmcm9tICd1dGlscy9mb3JtYXRUeXBlJztcbmltcG9ydCB7IG1xIH0gZnJvbSAndXRpbHMvbWVkaWFRdWVyeSc7XG5pbXBvcnQgeyBwYWdlQ29udGFpbmVyV2lkdGggfSBmcm9tICdzdHlsZXMvY29uc3RhbnRzJztcblxuY29uc3QgdGFibGVXcmFwcGVyID0gY3NzYFxuICAke21xKHtcbiAgICBtYXJnaW5MZWZ0OiBbJy0yNHB4JywgJ3Vuc2V0J10sXG4gICAgbWFyZ2luUmlnaHQ6IFsnLTI0cHgnLCAndW5zZXQnXSxcbiAgICBvdmVyZmxvdzogWydoaWRkZW4nLCAndW5zZXQnXSxcbiAgICB3aWR0aDogW1xuICAgICAgJ2luaGVyaXQnLFxuICAgICAgJ2luaGVyaXQnLFxuICAgICAgJ2luaGVyaXQnLFxuICAgICAgYCR7cGFnZUNvbnRhaW5lcldpZHRoLmRhdGFHcmFwaGljfXB4YCxcbiAgICBdLFxuICB9KX1cbmA7XG5cbmNvbnN0IHN1YnRpdGxlQm90dG9tTWFyZ2luID0gY3NzYFxuICBtYXJnaW4tYm90dG9tOiAyNHB4O1xuICAke21xKHtcbiAgICBtYXJnaW5MZWZ0OiBbJzI0cHgnLCAndW5zZXQnXSxcbiAgfSl9XG5gO1xuXG5jb25zdCB2ZXJ0aWNhbEFsaWduID0gY3NzYFxuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xuYDtcblxuY29uc3QgdGFibGVIZWFkZXJOYW1lczogQXJyYXk8J3Byb3AnIHwgJ3R5cGUnIHwgJ2Rlc2NyaXB0aW9uJyB8ICdkZWZhdWx0Jz4gPSBbXG4gICdwcm9wJyxcbiAgJ3R5cGUnLFxuICAnZGVzY3JpcHRpb24nLFxuICAnZGVmYXVsdCcsXG5dO1xuXG5jb25zdCBIZWFkaW5nVHlwZSA9IHtcbiAgQ29tcG9uZW50TmFtZTogJ2NvbXBvbmVudE5hbWUnLFxuICBUeXBlRGVmaW5pdGlvbjogJ3R5cGVEZWZpbml0aW9uJyxcbn0gYXMgY29uc3Q7XG5cbnR5cGUgSGVhZGluZ1R5cGUgPSB0eXBlb2YgSGVhZGluZ1R5cGVba2V5b2YgdHlwZW9mIEhlYWRpbmdUeXBlXTtcblxuZXhwb3J0IHsgSGVhZGluZ1R5cGUgfTtcblxuZXhwb3J0IGNvbnN0IHJlYWRtZURlcHRoTWFwID0ge1xuICBbSGVhZGluZ1R5cGUuQ29tcG9uZW50TmFtZV06IDEsXG4gIFtIZWFkaW5nVHlwZS5UeXBlRGVmaW5pdGlvbl06IDUsXG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlYWRtZU1hcmtkb3duIHtcbiAgY2hpbGRyZW46IEFycmF5PEhlYWRpbmcgfCBUYWJsZT47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSGVhZGluZyB7XG4gIHR5cGU6ICdoZWFkaW5nJztcbiAgZGVwdGg6IHR5cGVvZiByZWFkbWVEZXB0aE1hcFtrZXlvZiB0eXBlb2YgcmVhZG1lRGVwdGhNYXBdO1xuICBjaGlsZHJlbjogQXJyYXk8eyB2YWx1ZTogc3RyaW5nIH0+O1xufVxuXG5pbnRlcmZhY2UgVGFibGUge1xuICB0eXBlOiAndGFibGUnO1xuICBjaGlsZHJlbjogQXJyYXk8Um93SW50ZXJmYWNlPjtcbn1cblxuaW50ZXJmYWNlIFJvd0ludGVyZmFjZSB7XG4gIGNoaWxkcmVuOiBBcnJheTxDZWxsUm9vdD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2VsbFJvb3Qge1xuICBjaGlsZHJlbjogQXJyYXk8Q2VsbENoaWxkPjtcbn1cblxudHlwZSBDZWxsQ2hpbGQgPSBPbmVPZjxcbiAge1xuICAgIGNoaWxkcmVuOiBBcnJheTxDZWxsTGVhZj47XG4gIH0sXG4gIENlbGxMZWFmXG4+O1xuXG5pbnRlcmZhY2UgQ2VsbExlYWYge1xuICBjaGlsZHJlbj86IHVuZGVmaW5lZDtcbiAgdmFsdWU6IHN0cmluZztcbiAgdHlwZTogc3RyaW5nO1xuICBkZXB0aDogbnVtYmVyO1xuICB1cmw/OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBUYWJsZURhdGFJbnRlcmZhY2Uge1xuICBwcm9wOiB7IHZhbHVlPzogc3RyaW5nOyB1cmw/OiBzdHJpbmcgfTtcbiAgdHlwZTogeyB2YWx1ZT86IHN0cmluZzsgdXJsPzogc3RyaW5nIH07XG4gIGRlc2NyaXB0aW9uOiB7IHZhbHVlPzogc3RyaW5nOyB1cmw/OiBzdHJpbmcgfTtcbiAgZGVmYXVsdDogeyB2YWx1ZT86IHN0cmluZzsgdXJsPzogc3RyaW5nIH07XG59XG5cbmZ1bmN0aW9uIGdldFRhYmxlRGF0YShyb3dzOiBUYWJsZVsnY2hpbGRyZW4nXSk6IEFycmF5PFRhYmxlRGF0YUludGVyZmFjZT4ge1xuICBpZiAoIXJvd3MpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBjb25zdCByb3dNYXAgPSByb3dzLm1hcChyb3cgPT4ge1xuICAgIGNvbnN0IHJvd09iajogUGFydGlhbDxUYWJsZURhdGFJbnRlcmZhY2U+ID0ge307XG4gICAgcm93LmNoaWxkcmVuLm1hcCgoY2VsbCwgaW5kZXgpID0+IHtcbiAgICAgIGlmIChjZWxsLmNoaWxkcmVuPy5bMF0/LnVybCkge1xuICAgICAgICByb3dPYmpbdGFibGVIZWFkZXJOYW1lc1tpbmRleF1dID0geyB1cmw6IGNlbGwuY2hpbGRyZW5bMF0udXJsIH07XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHZhbHVlID1cbiAgICAgICAgY2VsbC5jaGlsZHJlblxuICAgICAgICAgIC5tYXAoY2hpbGQgPT4ge1xuICAgICAgICAgICAgaWYgKGNoaWxkLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjaGlsZC5jaGlsZHJlbi5tYXAoY2hpbGQgPT4gY2hpbGQudmFsdWUpLmpvaW4oJycpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY2hpbGQudmFsdWU7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuam9pbignJykgfHwgJy0nO1xuXG4gICAgICByb3dPYmpbdGFibGVIZWFkZXJOYW1lc1tpbmRleF1dID0ge1xuICAgICAgICAuLi5yb3dPYmpbdGFibGVIZWFkZXJOYW1lc1tpbmRleF1dLFxuICAgICAgICB2YWx1ZSxcbiAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIHJvd09iajtcbiAgfSk7XG5cbiAgcm93TWFwLnNoaWZ0KCk7XG5cbiAgcmV0dXJuIHJvd01hcCBhcyBBcnJheTxUYWJsZURhdGFJbnRlcmZhY2U+O1xufVxuXG5mdW5jdGlvbiBXcmFwcGVyKHtcbiAgY2hpbGRyZW4sXG4gIGlzVG91Y2hEZXZpY2UsXG59OiB7XG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGU7XG4gIGlzVG91Y2hEZXZpY2U6IGJvb2xlYW47XG59KSB7XG4gIGlmIChpc1RvdWNoRGV2aWNlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPXtjc3NgXG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogNTZweDtcbiAgICAgICAgYH1cbiAgICAgID5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPENhcmRcbiAgICAgIGNsYXNzTmFtZT17Y3NzYFxuICAgICAgICBwYWRkaW5nOiAyNHB4O1xuICAgICAgICBtYXJnaW4tYm90dG9tOiA1NnB4O1xuICAgICAgYH1cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9DYXJkPlxuICApO1xufVxuXG5mdW5jdGlvbiBQcm9wVGFibGUoe1xuICBtYXJrZG93bkFzdCxcbiAgY29tcG9uZW50LFxufToge1xuICBtYXJrZG93bkFzdDogUmVhZG1lTWFya2Rvd247XG4gIGNvbXBvbmVudDogc3RyaW5nO1xufSkge1xuICBjb25zdCB2aWV3cG9ydCA9IHVzZVZpZXdwb3J0U2l6ZSgpO1xuXG4gIGNvbnN0IGlzVG91Y2hEZXZpY2UgPVxuICAgIHZpZXdwb3J0ICE9PSBudWxsID8gdmlld3BvcnQud2lkdGggPCBicmVha3BvaW50cy5UYWJsZXQgOiBmYWxzZTtcblxuICBsZXQgcGVlckRlcEluZGV4OiBudW1iZXIgfCB1bmRlZmluZWQ7XG5cbiAgY29uc3QgaGVhZGVycyA9IG1hcmtkb3duQXN0LmNoaWxkcmVuXG4gICAgLmZpbHRlcihcbiAgICAgIHRyZWVJdGVtID0+XG4gICAgICAgIHRyZWVJdGVtLnR5cGUgPT09ICdoZWFkaW5nJyAmJlxuICAgICAgICB0cmVlSXRlbS5kZXB0aCA9PT0gcmVhZG1lRGVwdGhNYXBbSGVhZGluZ1R5cGUuQ29tcG9uZW50TmFtZV0sXG4gICAgKVxuICAgIC5tYXAoKGl0ZW06IEhlYWRpbmcpID0+IGl0ZW0/LmNoaWxkcmVuPy5bMF0udmFsdWUpO1xuXG4gIGNvbnN0IHRhYmxlRGF0YSA9IG1hcmtkb3duQXN0LmNoaWxkcmVuXG4gICAgLmZpbHRlcigodHJlZUl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICBpZiAoXG4gICAgICAgIHRyZWVJdGVtLnR5cGUgPT09ICdoZWFkaW5nJyAmJlxuICAgICAgICB0cmVlSXRlbS5jaGlsZHJlbj8uWzBdLnZhbHVlID09PSAnUGVlciBEZXBlbmRlbmNpZXMnXG4gICAgICApIHtcbiAgICAgICAgcGVlckRlcEluZGV4ID0gaW5kZXg7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgICEodHlwZW9mIHBlZXJEZXBJbmRleCA9PT0gJ251bWJlcicgJiYgcGVlckRlcEluZGV4ICsgMSA9PT0gaW5kZXgpICYmXG4gICAgICAgIHRyZWVJdGVtLnR5cGUgPT09ICd0YWJsZSdcbiAgICAgICk7XG4gICAgfSlcbiAgICAubWFwKChpdGVtOiBUYWJsZSkgPT4gZ2V0VGFibGVEYXRhKGl0ZW0uY2hpbGRyZW4pKTtcblxuICBpZiAodGFibGVEYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKGNvbXBvbmVudCA9PT0gJ3R5cG9ncmFwaHknKSB7XG4gICAgaGVhZGVycy5zaGlmdCgpO1xuICAgIHRhYmxlRGF0YS5zaGlmdCgpO1xuICB9XG5cbiAgY29uc3QgZm9ybWF0UHJvcCA9IChkYXR1bTogVGFibGVEYXRhSW50ZXJmYWNlKSA9PiB7XG4gICAgaWYgKGRhdHVtLnByb3AudmFsdWUgPT09ICcuLi4nKSB7XG4gICAgICByZXR1cm4gZGF0dW0ucHJvcC52YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFByb3BEZWZpbml0aW9uXG4gICAgICAgIHByb3A9e2RhdHVtLnByb3AudmFsdWUgPz8gJyd9XG4gICAgICAgIHR5cGU9e2RhdHVtLnR5cGUudmFsdWUgPz8gJyd9XG4gICAgICAgIGRlc2NyaXB0aW9uPXtkYXR1bS5kZXNjcmlwdGlvbi52YWx1ZSA/PyAnJ31cbiAgICAgICAgZGVmYXVsdFZhbHVlPXtkYXR1bS5kZWZhdWx0Py52YWx1ZSA/PyAnJ31cbiAgICAgIC8+XG4gICAgKTtcbiAgfTtcblxuICBjb25zdCBmb3JtYXREZWZhdWx0ID0gKGRhdHVtOiBUYWJsZURhdGFJbnRlcmZhY2UpID0+IHtcbiAgICBpZiAoZGF0dW0uZGVmYXVsdD8udmFsdWUgPT09ICctJykge1xuICAgICAgcmV0dXJuICctJztcbiAgICB9XG5cbiAgICByZXR1cm4gPElubGluZUNvZGU+e2RhdHVtLmRlZmF1bHQ/LnZhbHVlfTwvSW5saW5lQ29kZT47XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjbGFzc05hbWU9e2Nzc2BcbiAgICAgICAgbWFyZ2luLXRvcDogNDBweDtcbiAgICAgIGB9XG4gICAgPlxuICAgICAge2NvbXBvbmVudCA9PT0gJ3R5cG9ncmFwaHknICYmIDxUeXBvZ3JhcGh5UHJvcFRhYmxlIC8+fVxuICAgICAge2hlYWRlcnMubWFwKChoZWFkZXI6IHN0cmluZywgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhoZWFkZXIpXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPGRpdiBrZXk9e2luZGV4fSBjbGFzc05hbWU9e3RhYmxlV3JhcHBlcn0+XG4gICAgICAgICAgICA8U3VidGl0bGUgY2xhc3NOYW1lPXtzdWJ0aXRsZUJvdHRvbU1hcmdpbn0gYXM9XCJoM1wiPlxuICAgICAgICAgICAgICB7YCR7aGVhZGVyLnJlcGxhY2UoLyAvZywgJycpfSBQcm9wc2B9XG4gICAgICAgICAgICA8L1N1YnRpdGxlPlxuXG4gICAgICAgICAgICB7dGFibGVEYXRhW2luZGV4XSAmJiAoXG4gICAgICAgICAgICAgIDxXcmFwcGVyIGlzVG91Y2hEZXZpY2U9e2lzVG91Y2hEZXZpY2V9PlxuICAgICAgICAgICAgICAgIDxUYWJsZVxuICAgICAgICAgICAgICAgICAga2V5PXtoZWFkZXJ9XG4gICAgICAgICAgICAgICAgICBkYXRhPXt0YWJsZURhdGFbaW5kZXhdfVxuICAgICAgICAgICAgICAgICAgY29sdW1ucz17W1xuICAgICAgICAgICAgICAgICAgICA8VGFibGVIZWFkZXIgZGF0YVR5cGU9XCJzdHJpbmdcIiBsYWJlbD1cIlByb3BcIiBrZXk9XCJwcm9wXCIgLz4sXG4gICAgICAgICAgICAgICAgICAgIDxUYWJsZUhlYWRlciBkYXRhVHlwZT1cInN0cmluZ1wiIGxhYmVsPVwiVHlwZVwiIGtleT1cInR5cGVcIiAvPixcbiAgICAgICAgICAgICAgICAgICAgPFRhYmxlSGVhZGVyXG4gICAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU9XCJzdHJpbmdcIlxuICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPVwiRGVzY3JpcHRpb25cIlxuICAgICAgICAgICAgICAgICAgICAgIGtleT1cImRlc2NyaXB0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgLz4sXG4gICAgICAgICAgICAgICAgICAgIDxUYWJsZUhlYWRlclxuICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlPVwic3RyaW5nXCJcbiAgICAgICAgICAgICAgICAgICAgICBsYWJlbD1cIkRlZmF1bHRcIlxuICAgICAgICAgICAgICAgICAgICAgIGtleT1cImRlZmF1bHRcIlxuICAgICAgICAgICAgICAgICAgICAvPixcbiAgICAgICAgICAgICAgICAgIF19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgeyh7IGRhdHVtIH0pID0+IChcbiAgICAgICAgICAgICAgICAgICAgPFJvdyBrZXk9e2RhdHVtLnByb3AudmFsdWV9PlxuICAgICAgICAgICAgICAgICAgICAgIDxDZWxsIGNsYXNzTmFtZT17dmVydGljYWxBbGlnbn0+e2Zvcm1hdFByb3AoZGF0dW0pfTwvQ2VsbD5cbiAgICAgICAgICAgICAgICAgICAgICA8Q2VsbCBjbGFzc05hbWU9e3ZlcnRpY2FsQWxpZ259PlxuICAgICAgICAgICAgICAgICAgICAgICAge3R5cGVvZiBkYXR1bS50eXBlLnZhbHVlID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICA/IGZvcm1hdFR5cGUoZGF0dW0udHlwZS52YWx1ZSwgZGF0dW0udHlwZS51cmwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbH1cbiAgICAgICAgICAgICAgICAgICAgICA8L0NlbGw+XG4gICAgICAgICAgICAgICAgICAgICAgPENlbGwgY2xhc3NOYW1lPXt2ZXJ0aWNhbEFsaWdufT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtkYXR1bS5kZXNjcmlwdGlvbi52YWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgICA8L0NlbGw+XG4gICAgICAgICAgICAgICAgICAgICAgPENlbGwgY2xhc3NOYW1lPXt2ZXJ0aWNhbEFsaWdufT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtmb3JtYXREZWZhdWx0KGRhdHVtKX1cbiAgICAgICAgICAgICAgICAgICAgICA8L0NlbGw+XG4gICAgICAgICAgICAgICAgICAgIDwvUm93PlxuICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICA8L1RhYmxlPlxuICAgICAgICAgICAgICA8L1dyYXBwZXI+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgICAgfSl9XG4gICAgPC9kaXY+XG4gICk7XG59XG5cblByb3BUYWJsZS5kaXNwbGF5TmFtZSA9ICdQcm9wVGFibGUnO1xuXG5leHBvcnQgZGVmYXVsdCBQcm9wVGFibGU7XG4iXX0= */\", false ? undefined : \";label:tableWrapper;\");\nvar subtitleBottomMargin =\n/*#__PURE__*/\n\n/*#__PURE__*/\nObject(_emotion_css__WEBPACK_IMPORTED_MODULE_2__[\"css\"])(\"margin-bottom:24px;\", Object(utils_mediaQuery__WEBPACK_IMPORTED_MODULE_11__[\"mq\"])({\n  marginLeft: ['24px', 'unset']\n}), \";\" + (false ? undefined : \";label:subtitleBottomMargin;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", false ? undefined : \";label:subtitleBottomMargin;\");\nvar verticalAlign = /*#__PURE__*/Object(_emotion_css__WEBPACK_IMPORTED_MODULE_2__[\"css\"])(false ? undefined : {\n  name: \"wxl5vo-verticalAlign\",\n  styles: \"vertical-align:top;label:verticalAlign;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nvar tableHeaderNames = ['prop', 'type', 'description', 'default'];\nvar HeadingType = {\n  ComponentName: 'componentName',\n  TypeDefinition: 'typeDefinition'\n};\n\nvar readmeDepthMap = (_readmeDepthMap = {}, Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_readmeDepthMap, HeadingType.ComponentName, 1), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_readmeDepthMap, HeadingType.TypeDefinition, 5), _readmeDepthMap);\n\nfunction getTableData(rows) {\n  if (!rows) {\n    return [];\n  }\n\n  var rowMap = rows.map(function (row) {\n    var rowObj = {};\n    row.children.map(function (cell, index) {\n      var _cell$children, _cell$children$;\n\n      if ((_cell$children = cell.children) !== null && _cell$children !== void 0 && (_cell$children$ = _cell$children[0]) !== null && _cell$children$ !== void 0 && _cell$children$.url) {\n        rowObj[tableHeaderNames[index]] = {\n          url: cell.children[0].url\n        };\n      }\n\n      var value = cell.children.map(function (child) {\n        if (child.children) {\n          return child.children.map(function (child) {\n            return child.value;\n          }).join('');\n        }\n\n        return child.value;\n      }).join('') || '-';\n      rowObj[tableHeaderNames[index]] = _objectSpread(_objectSpread({}, rowObj[tableHeaderNames[index]]), {}, {\n        value: value\n      });\n    });\n    return rowObj;\n  });\n  rowMap.shift();\n  return rowMap;\n}\n\nfunction Wrapper(_ref) {\n  var children = _ref.children,\n      isTouchDevice = _ref.isTouchDevice;\n\n  if (isTouchDevice) {\n    return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(\"div\", {\n      className: /*#__PURE__*/Object(_emotion_css__WEBPACK_IMPORTED_MODULE_2__[\"css\"])(false ? undefined : {\n        name: \"1en99rl-Wrapper\",\n        styles: \"margin-bottom:56px;label:Wrapper;\",\n        map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n        toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }\n    }, children);\n  }\n\n  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(_leafygreen_ui_card__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n    className: /*#__PURE__*/Object(_emotion_css__WEBPACK_IMPORTED_MODULE_2__[\"css\"])(false ? undefined : {\n      name: \"1sjna08-Wrapper\",\n      styles: \"padding:24px;margin-bottom:56px;label:Wrapper;\",\n      map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n      toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 5\n    }\n  }, children);\n}\n\n_c = Wrapper;\n\nfunction PropTable(_ref2) {\n  _s();\n\n  var _this = this;\n\n  var markdownAst = _ref2.markdownAst,\n      component = _ref2.component;\n  var viewport = Object(_leafygreen_ui_hooks__WEBPACK_IMPORTED_MODULE_6__[\"useViewportSize\"])();\n  var isTouchDevice = viewport !== null ? viewport.width < _leafygreen_ui_tokens__WEBPACK_IMPORTED_MODULE_7__[\"breakpoints\"].Tablet : false;\n  var peerDepIndex;\n  var headers = markdownAst.children.filter(function (treeItem) {\n    return treeItem.type === 'heading' && treeItem.depth === readmeDepthMap[HeadingType.ComponentName];\n  }).map(function (item) {\n    var _item$children;\n\n    return item === null || item === void 0 ? void 0 : (_item$children = item.children) === null || _item$children === void 0 ? void 0 : _item$children[0].value;\n  });\n  var tableData = markdownAst.children.filter(function (treeItem, index) {\n    var _treeItem$children;\n\n    if (treeItem.type === 'heading' && ((_treeItem$children = treeItem.children) === null || _treeItem$children === void 0 ? void 0 : _treeItem$children[0].value) === 'Peer Dependencies') {\n      peerDepIndex = index;\n    }\n\n    return !(typeof peerDepIndex === 'number' && peerDepIndex + 1 === index) && treeItem.type === 'table';\n  }).map(function (item) {\n    return getTableData(item.children);\n  });\n\n  if (tableData.length === 0) {\n    return null;\n  }\n\n  if (component === 'typography') {\n    headers.shift();\n    tableData.shift();\n  }\n\n  var formatProp = function formatProp(datum) {\n    var _datum$prop$value, _datum$type$value, _datum$description$va, _datum$default$value, _datum$default;\n\n    if (datum.prop.value === '...') {\n      return datum.prop.value;\n    }\n\n    return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(components_PropDefinition__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n      prop: (_datum$prop$value = datum.prop.value) !== null && _datum$prop$value !== void 0 ? _datum$prop$value : '',\n      type: (_datum$type$value = datum.type.value) !== null && _datum$type$value !== void 0 ? _datum$type$value : '',\n      description: (_datum$description$va = datum.description.value) !== null && _datum$description$va !== void 0 ? _datum$description$va : '',\n      defaultValue: (_datum$default$value = (_datum$default = datum[\"default\"]) === null || _datum$default === void 0 ? void 0 : _datum$default.value) !== null && _datum$default$value !== void 0 ? _datum$default$value : '',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 7\n      }\n    });\n  };\n\n  var formatDefault = function formatDefault(datum) {\n    var _datum$default2, _datum$default3;\n\n    if (((_datum$default2 = datum[\"default\"]) === null || _datum$default2 === void 0 ? void 0 : _datum$default2.value) === '-') {\n      return '-';\n    }\n\n    return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(_leafygreen_ui_typography__WEBPACK_IMPORTED_MODULE_5__[\"InlineCode\"], {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 12\n      }\n    }, (_datum$default3 = datum[\"default\"]) === null || _datum$default3 === void 0 ? void 0 : _datum$default3.value);\n  };\n\n  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(\"div\", {\n    className: /*#__PURE__*/Object(_emotion_css__WEBPACK_IMPORTED_MODULE_2__[\"css\"])(false ? undefined : {\n      name: \"1cwtdqt-PropTable\",\n      styles: \"margin-top:40px;label:PropTable;\",\n      map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n      toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 5\n    }\n  }, component === 'typography' && Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(components_TypographyPropTable__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 38\n    }\n  }), headers.map(function (header, index) {\n    console.log(header);\n    return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(\"div\", {\n      key: index,\n      className: tableWrapper,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }\n    }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(_leafygreen_ui_typography__WEBPACK_IMPORTED_MODULE_5__[\"Subtitle\"], {\n      className: subtitleBottomMargin,\n      as: \"h3\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 13\n      }\n    }, \"\".concat(header.replace(/ /g, ''), \" Props\")), tableData[index] && Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(Wrapper, {\n      isTouchDevice: isTouchDevice,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 15\n      }\n    }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(_leafygreen_ui_table__WEBPACK_IMPORTED_MODULE_4__[\"Table\"], {\n      key: header,\n      data: tableData[index],\n      columns: [Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(_leafygreen_ui_table__WEBPACK_IMPORTED_MODULE_4__[\"TableHeader\"], {\n        dataType: \"string\",\n        label: \"Prop\",\n        key: \"prop\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 21\n        }\n      }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(_leafygreen_ui_table__WEBPACK_IMPORTED_MODULE_4__[\"TableHeader\"], {\n        dataType: \"string\",\n        label: \"Type\",\n        key: \"type\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 21\n        }\n      }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(_leafygreen_ui_table__WEBPACK_IMPORTED_MODULE_4__[\"TableHeader\"], {\n        dataType: \"string\",\n        label: \"Description\",\n        key: \"description\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 21\n        }\n      }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(_leafygreen_ui_table__WEBPACK_IMPORTED_MODULE_4__[\"TableHeader\"], {\n        dataType: \"string\",\n        label: \"Default\",\n        key: \"default\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 21\n        }\n      })],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 17\n      }\n    }, function (_ref3) {\n      var datum = _ref3.datum;\n      return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(_leafygreen_ui_table__WEBPACK_IMPORTED_MODULE_4__[\"Row\"], {\n        key: datum.prop.value,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 21\n        }\n      }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(_leafygreen_ui_table__WEBPACK_IMPORTED_MODULE_4__[\"Cell\"], {\n        className: verticalAlign,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 23\n        }\n      }, formatProp(datum)), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(_leafygreen_ui_table__WEBPACK_IMPORTED_MODULE_4__[\"Cell\"], {\n        className: verticalAlign,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 23\n        }\n      }, typeof datum.type.value === 'string' ? Object(utils_formatType__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(datum.type.value, datum.type.url) : null), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(_leafygreen_ui_table__WEBPACK_IMPORTED_MODULE_4__[\"Cell\"], {\n        className: verticalAlign,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 23\n        }\n      }, datum.description.value), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(_leafygreen_ui_table__WEBPACK_IMPORTED_MODULE_4__[\"Cell\"], {\n        className: verticalAlign,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 23\n        }\n      }, formatDefault(datum)));\n    })));\n  }));\n}\n\n_s(PropTable, \"vwbeZAB0yBqiSQlG2n5ytTpw5es=\", false, function () {\n  return [_leafygreen_ui_hooks__WEBPACK_IMPORTED_MODULE_6__[\"useViewportSize\"]];\n});\n\n_c2 = PropTable;\nPropTable.displayName = 'PropTable';\n/* harmony default export */ __webpack_exports__[\"default\"] = (PropTable);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"PropTable\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/next/node_modules/webpack/buildin/harmony-module.js */ \"../node_modules/next/node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/PropTable.tsx\n");

/***/ })

})