webpackHotUpdate_N_E("pages/component/logo/documentation",{

/***/ "./components/CodeDocs.tsx":
/*!*********************************!*\
  !*** ./components/CodeDocs.tsx ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"../node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"../node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/css */ \"../node_modules/@emotion/css/dist/emotion-css.esm.js\");\n/* harmony import */ var unified__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! unified */ \"../node_modules/unified/index.js\");\n/* harmony import */ var unified__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(unified__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var remark_parse__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! remark-parse */ \"../node_modules/remark-parse/index.js\");\n/* harmony import */ var remark_parse__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(remark_parse__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _leafygreen_ui_icon_dist_ActivityFeed__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @leafygreen-ui/icon/dist/ActivityFeed */ \"../packages/icon/dist/ActivityFeed.js\");\n/* harmony import */ var _leafygreen_ui_icon_dist_ActivityFeed__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_leafygreen_ui_icon_dist_ActivityFeed__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _leafygreen_ui_button__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @leafygreen-ui/button */ \"../packages/button/dist/esm/index.js\");\n/* harmony import */ var _leafygreen_ui_card__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @leafygreen-ui/card */ \"../packages/card/dist/esm/index.js\");\n/* harmony import */ var _leafygreen_ui_code__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @leafygreen-ui/code */ \"../packages/code/dist/esm/index.js\");\n/* harmony import */ var _leafygreen_ui_copyable__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @leafygreen-ui/copyable */ \"../packages/copyable/dist/esm/index.js\");\n/* harmony import */ var _leafygreen_ui_modal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @leafygreen-ui/modal */ \"../packages/modal/dist/esm/index.js\");\n/* harmony import */ var _leafygreen_ui_tabs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @leafygreen-ui/tabs */ \"../packages/tabs/dist/esm/index.js\");\n/* harmony import */ var _leafygreen_ui_typography__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @leafygreen-ui/typography */ \"../packages/typography/dist/esm/index.js\");\n/* harmony import */ var _leafygreen_ui_palette__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @leafygreen-ui/palette */ \"../packages/palette/dist/esm/index.js\");\n/* harmony import */ var _leafygreen_ui_tokens__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @leafygreen-ui/tokens */ \"../packages/tokens/dist/esm/index.js\");\n/* harmony import */ var _leafygreen_ui_hooks__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @leafygreen-ui/hooks */ \"../packages/hooks/dist/esm/index.js\");\n/* harmony import */ var styles_constants__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! styles/constants */ \"./styles/constants.ts\");\n/* harmony import */ var components_Grid__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! components/Grid */ \"./components/Grid.tsx\");\n/* harmony import */ var components_PropTable__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! components/PropTable */ \"./components/PropTable.tsx\");\n/* harmony import */ var components_TypeDefinition__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! components/TypeDefinition */ \"./components/TypeDefinition.tsx\");\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @emotion/react */ \"../node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n\n\nvar _jsxFileName = \"/Users/davemccarthy/Repositories/MongoDB/leafygreen-ui/website/components/CodeDocs.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar topAlignment =\n/*#__PURE__*/\n\n/*#__PURE__*/\nObject(_emotion_css__WEBPACK_IMPORTED_MODULE_2__[\"css\"])(\"margin-top:\", _leafygreen_ui_tokens__WEBPACK_IMPORTED_MODULE_14__[\"spacing\"][4], \"px;padding-top:\", _leafygreen_ui_tokens__WEBPACK_IMPORTED_MODULE_14__[\"spacing\"][3], \"px;margin-bottom:\", _leafygreen_ui_tokens__WEBPACK_IMPORTED_MODULE_14__[\"spacing\"][3], \"px;\" + (false ? undefined : \";label:topAlignment;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", false ? undefined : \";label:topAlignment;\");\nvar versionCardDesktopMargin = /*#__PURE__*/Object(_emotion_css__WEBPACK_IMPORTED_MODULE_2__[\"css\"])(false ? undefined : {\n  name: \"1xdbre-versionCardDesktopMargin\",\n  styles: \"margin-left:20px;label:versionCardDesktopMargin;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZlbWNjYXJ0aHkvUmVwb3NpdG9yaWVzL01vbmdvREIvbGVhZnlncmVlbi11aS93ZWJzaXRlL2NvbXBvbmVudHMvQ29kZURvY3MudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJCb0MiLCJmaWxlIjoiL1VzZXJzL2RhdmVtY2NhcnRoeS9SZXBvc2l0b3JpZXMvTW9uZ29EQi9sZWFmeWdyZWVuLXVpL3dlYnNpdGUvY29tcG9uZW50cy9Db2RlRG9jcy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MsIGN4IH0gZnJvbSAnQGVtb3Rpb24vY3NzJztcbmltcG9ydCB1bmlmaWVkIGZyb20gJ3VuaWZpZWQnO1xuaW1wb3J0IG1hcmtkb3duIGZyb20gJ3JlbWFyay1wYXJzZSc7XG5pbXBvcnQgQWN0aXZpdHlGZWVkSWNvbiBmcm9tICdAbGVhZnlncmVlbi11aS9pY29uL2Rpc3QvQWN0aXZpdHlGZWVkJztcbmltcG9ydCBCdXR0b24gZnJvbSAnQGxlYWZ5Z3JlZW4tdWkvYnV0dG9uJztcbmltcG9ydCBDYXJkIGZyb20gJ0BsZWFmeWdyZWVuLXVpL2NhcmQnO1xuaW1wb3J0IENvZGUgZnJvbSAnQGxlYWZ5Z3JlZW4tdWkvY29kZSc7XG5pbXBvcnQgQ29weWFibGUgZnJvbSAnQGxlYWZ5Z3JlZW4tdWkvY29weWFibGUnO1xuaW1wb3J0IE1vZGFsIGZyb20gJ0BsZWFmeWdyZWVuLXVpL21vZGFsJztcbmltcG9ydCB7IFRhYnMsIFRhYiB9IGZyb20gJ0BsZWFmeWdyZWVuLXVpL3RhYnMnO1xuaW1wb3J0IHsgU3VidGl0bGUsIEJvZHkgfSBmcm9tICdAbGVhZnlncmVlbi11aS90eXBvZ3JhcGh5JztcbmltcG9ydCB7IHVpQ29sb3JzIH0gZnJvbSAnQGxlYWZ5Z3JlZW4tdWkvcGFsZXR0ZSc7XG5pbXBvcnQgeyBzcGFjaW5nLCBicmVha3BvaW50cyB9IGZyb20gJ0BsZWFmeWdyZWVuLXVpL3Rva2Vucyc7XG5pbXBvcnQgeyB1c2VWaWV3cG9ydFNpemUgfSBmcm9tICdAbGVhZnlncmVlbi11aS9ob29rcyc7XG5pbXBvcnQgeyBCYXNlTGF5b3V0UHJvcHMgfSBmcm9tICd1dGlscy90eXBlcyc7XG5pbXBvcnQgeyBwYWdlQ29udGFpbmVyV2lkdGggfSBmcm9tICdzdHlsZXMvY29uc3RhbnRzJztcbmltcG9ydCB7IEdyaWRDb250YWluZXIsIEdyaWRJdGVtIH0gZnJvbSAnY29tcG9uZW50cy9HcmlkJztcbmltcG9ydCBQcm9wVGFibGUsIHsgUmVhZG1lTWFya2Rvd24gfSBmcm9tICdjb21wb25lbnRzL1Byb3BUYWJsZSc7XG5pbXBvcnQgVHlwZURlZmluaXRpb24gZnJvbSAnY29tcG9uZW50cy9UeXBlRGVmaW5pdGlvbic7XG5cbmNvbnN0IHRvcEFsaWdubWVudCA9IGNzc2BcbiAgbWFyZ2luLXRvcDogJHtzcGFjaW5nWzRdfXB4O1xuICBwYWRkaW5nLXRvcDogJHtzcGFjaW5nWzNdfXB4O1xuICBtYXJnaW4tYm90dG9tOiAke3NwYWNpbmdbM119cHg7XG5gO1xuXG5jb25zdCB2ZXJzaW9uQ2FyZERlc2t0b3BNYXJnaW4gPSBjc3NgXG4gIG1hcmdpbi1sZWZ0OiAyMHB4O1xuYDtcblxuY29uc3QgbXQzID0gY3NzYFxuICBtYXJnaW4tdG9wOiAke3NwYWNpbmdbM119cHg7XG5gO1xuXG5jb25zdCBtYjEgPSBjc3NgXG4gIG1hcmdpbi1ib3R0b206ICR7c3BhY2luZ1sxXX1weDtcbmA7XG5cbmNvbnN0IGNvcHlhYmxlU3R5bGVzID0gY3NzYFxuICB3aWR0aDogMTAwJTtcbiAgbWF4LXdpZHRoOiA0MDBweDtcbmA7XG5cbmNvbnN0IHZlcnNpb25DYXJkID0gY3NzYFxuICBtaW4taGVpZ2h0OiAxMDZweDtcbiAgcGFkZGluZzogJHtzcGFjaW5nWzNdfXB4ICR7c3BhY2luZ1s0XX1weDtcbmA7XG5cbmNvbnN0IHN1YnRpdGxlUGFkZGluZyA9IGNzc2BcbiAgcGFkZGluZy1ib3R0b206ICR7c3BhY2luZ1szXX1weDtcbmA7XG5cbmNvbnN0IHRhYnNQYWRkaW5nID0gY3NzYFxuICBwYWRkaW5nLXRvcDogJHtzcGFjaW5nWzRdfXB4O1xuYDtcblxuY29uc3QgbW9iaWxlSW5zdGFsbE1hcmdpbiA9IGNzc2BcbiAgbWFyZ2luLXRvcDogNTBweDtcbiAgbWFyZ2luLWJvdHRvbTogJHtzcGFjaW5nWzNdfXB4O1xuYDtcblxuY29uc3QgY2hhbmdlbG9nU3R5bGVzID0gY3NzYFxuICBjb2xvcjogJHt1aUNvbG9ycy5ncmF5LmRhcmszfTtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG5cbiAgJiA+IGgyIHtcbiAgICBwYWRkaW5nLXRvcDogJHtzcGFjaW5nWzNdfXB4O1xuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAke3VpQ29sb3JzLmdyYXkubGlnaHQyfTtcbiAgfVxuXG4gIGEge1xuICAgIGNvbG9yOiAke3VpQ29sb3JzLmdyYXkuZGFyazN9O1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgfVxuYDtcblxuY29uc3QgbWF4V2lkdGggPSBjc3NgXG4gIG1heC13aWR0aDogJHtwYWdlQ29udGFpbmVyV2lkdGguZGVmYXVsdH1weDtcbmA7XG5cbmludGVyZmFjZSBWZXJzaW9uQ2FyZFByb3BzIHtcbiAgdmVyc2lvbj86IHN0cmluZztcbiAgY2hhbmdlbG9nOiBzdHJpbmc7XG4gIGlzTW9iaWxlPzogYm9vbGVhbjtcbn1cblxuaW50ZXJmYWNlIEluc3RhbGxQcm9wcyB7XG4gIGNvbXBvbmVudDogc3RyaW5nO1xuICB2ZXJzaW9uPzogc3RyaW5nO1xuICBjaGFuZ2Vsb2c6IHN0cmluZztcbn1cblxuZnVuY3Rpb24gVmVyc2lvbkNhcmQoe1xuICB2ZXJzaW9uLFxuICBjaGFuZ2Vsb2csXG4gIGlzTW9iaWxlID0gZmFsc2UsXG59OiBWZXJzaW9uQ2FyZFByb3BzKSB7XG4gIGNvbnN0IFtvcGVuTW9kYWwsIHNldE9wZW5Nb2RhbF0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgcmV0dXJuIChcbiAgICA8Q2FyZCBjbGFzc05hbWU9e2N4KHRvcEFsaWdubWVudCwgdmVyc2lvbkNhcmQpfT5cbiAgICAgIDxTdWJ0aXRsZSBhcz1cImgyXCIgY2xhc3NOYW1lPXtzdWJ0aXRsZVBhZGRpbmd9PlxuICAgICAgICBWZXJzaW9uIHt2ZXJzaW9ufVxuICAgICAgPC9TdWJ0aXRsZT5cbiAgICAgIDxCdXR0b25cbiAgICAgICAgc2l6ZT17aXNNb2JpbGUgPyAnbGFyZ2UnIDogJ2RlZmF1bHQnfVxuICAgICAgICBsZWZ0R2x5cGg9ezxBY3Rpdml0eUZlZWRJY29uIC8+fVxuICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRPcGVuTW9kYWwoY3VyciA9PiAhY3Vycil9XG4gICAgICAgIGNsYXNzTmFtZT17Y3goe1xuICAgICAgICAgIFtjc3NgXG4gICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBgXTogaXNNb2JpbGUsXG4gICAgICAgIH0pfVxuICAgICAgPlxuICAgICAgICBWaWV3IENoYW5nZWxvZ1xuICAgICAgPC9CdXR0b24+XG4gICAgICA8TW9kYWxcbiAgICAgICAgY2xhc3NOYW1lPXtjc3NgXG4gICAgICAgICAgei1pbmRleDogMTtcbiAgICAgICAgYH1cbiAgICAgICAgb3Blbj17b3Blbk1vZGFsfVxuICAgICAgICBzZXRPcGVuPXtzZXRPcGVuTW9kYWx9XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzc05hbWU9e2NoYW5nZWxvZ1N0eWxlc31cbiAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IGNoYW5nZWxvZyB9fVxuICAgICAgICA+PC9kaXY+XG4gICAgICA8L01vZGFsPlxuICAgIDwvQ2FyZD5cbiAgKTtcbn1cblxuVmVyc2lvbkNhcmQuZGlzcGxheU5hbWUgPSAnVmVyc2lvbkNhcmQnO1xuXG5mdW5jdGlvbiBNb2JpbGVJbnN0YWxsKHsgY29tcG9uZW50LCB2ZXJzaW9uLCBjaGFuZ2Vsb2cgfTogSW5zdGFsbFByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPEdyaWRDb250YWluZXI+XG4gICAgICA8R3JpZEl0ZW0gc209ezEyfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e21vYmlsZUluc3RhbGxNYXJnaW59PlxuICAgICAgICAgIDxTdWJ0aXRsZSBhcz1cImgyXCI+SW5zdGFsbGF0aW9uPC9TdWJ0aXRsZT5cbiAgICAgICAgICA8Qm9keSB3ZWlnaHQ9XCJtZWRpdW1cIiBjbGFzc05hbWU9e210M30+XG4gICAgICAgICAgICBZYXJuXG4gICAgICAgICAgPC9Cb2R5PlxuICAgICAgICAgIDxDb3B5YWJsZVxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjb3B5YWJsZVN0eWxlc31cbiAgICAgICAgICA+e2B5YXJuIGFkZCBAbGVhZnlncmVlbi11aS8ke2NvbXBvbmVudH1gfTwvQ29weWFibGU+XG4gICAgICAgICAgPEJvZHkgd2VpZ2h0PVwibWVkaXVtXCIgY2xhc3NOYW1lPXttdDN9PlxuICAgICAgICAgICAgTlBNXG4gICAgICAgICAgPC9Cb2R5PlxuICAgICAgICAgIDxDb3B5YWJsZVxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjb3B5YWJsZVN0eWxlc31cbiAgICAgICAgICA+e2BucG0gaW5zdGFsbCBAbGVhZnlncmVlbi11aS8ke2NvbXBvbmVudH1gfTwvQ29weWFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9HcmlkSXRlbT5cbiAgICAgIDxHcmlkSXRlbSBzbT17MTJ9PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxWZXJzaW9uQ2FyZCB2ZXJzaW9uPXt2ZXJzaW9ufSBjaGFuZ2Vsb2c9e2NoYW5nZWxvZ30gaXNNb2JpbGUgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L0dyaWRJdGVtPlxuICAgIDwvR3JpZENvbnRhaW5lcj5cbiAgKTtcbn1cblxuTW9iaWxlSW5zdGFsbC5kaXNwbGF5TmFtZSA9ICdNb2JpbGVJbnN0YWxsJztcblxuZnVuY3Rpb24gRGVza3RvcEluc3RhbGwoeyBjb21wb25lbnQsIGNoYW5nZWxvZywgdmVyc2lvbiB9OiBJbnN0YWxsUHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPEdyaWRDb250YWluZXJcbiAgICAgICAganVzdGlmeT1cInNwYWNlLWJldHdlZW5cIlxuICAgICAgICBhbGlnbj1cImZsZXgtc3RhcnRcIlxuICAgICAgICBjbGFzc05hbWU9e21heFdpZHRofVxuICAgICAgPlxuICAgICAgICA8R3JpZEl0ZW0gbWQ9ezd9IGxnPXs3fT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17dG9wQWxpZ25tZW50fT5cbiAgICAgICAgICAgIDxTdWJ0aXRsZVxuICAgICAgICAgICAgICBhcz1cImgyXCJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjc3NgXG4gICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogJHtzcGFjaW5nWzNdfXB4O1xuICAgICAgICAgICAgICBgfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICBJbnN0YWxsYXRpb25cbiAgICAgICAgICAgIDwvU3VidGl0bGU+XG4gICAgICAgICAgICA8Qm9keSB3ZWlnaHQ9XCJtZWRpdW1cIiBjbGFzc05hbWU9e21iMX0+XG4gICAgICAgICAgICAgIFlhcm5cbiAgICAgICAgICAgIDwvQm9keT5cbiAgICAgICAgICAgIDxDb3B5YWJsZT57YHlhcm4gYWRkIEBsZWFmeWdyZWVuLXVpLyR7Y29tcG9uZW50fWB9PC9Db3B5YWJsZT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9HcmlkSXRlbT5cbiAgICAgICAgPEdyaWRJdGVtIG1kPXs1fSBsZz17NX0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3ZlcnNpb25DYXJkRGVza3RvcE1hcmdpbn0+XG4gICAgICAgICAgICA8VmVyc2lvbkNhcmQgY2hhbmdlbG9nPXtjaGFuZ2Vsb2d9IHZlcnNpb249e3ZlcnNpb259IC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvR3JpZEl0ZW0+XG4gICAgICA8L0dyaWRDb250YWluZXI+XG4gICAgICA8R3JpZENvbnRhaW5lciBhbGlnbj1cImZsZXgtc3RhcnRcIiBqdXN0aWZ5PVwiZmxleC1zdGFydFwiPlxuICAgICAgICA8R3JpZEl0ZW0gbWQ9ezd9IGxnPXs3fT5cbiAgICAgICAgICA8Qm9keSB3ZWlnaHQ9XCJtZWRpdW1cIiBjbGFzc05hbWU9e21iMX0+XG4gICAgICAgICAgICBOUE1cbiAgICAgICAgICA8L0JvZHk+XG4gICAgICAgICAgPENvcHlhYmxlPntgbnBtIGluc3RhbGwgQGxlYWZ5Z3JlZW4tdWkvJHtjb21wb25lbnR9YH08L0NvcHlhYmxlPlxuICAgICAgICA8L0dyaWRJdGVtPlxuICAgICAgPC9HcmlkQ29udGFpbmVyPlxuICAgIDwvPlxuICApO1xufVxuXG5EZXNrdG9wSW5zdGFsbC5kaXNwbGF5TmFtZSA9ICdEZXNrdG9wSW5zdGFsbCc7XG5cbmZ1bmN0aW9uIENvZGVEb2NzKHsgY29tcG9uZW50LCByZWFkbWUsIGNoYW5nZWxvZyB9OiBCYXNlTGF5b3V0UHJvcHMpIHtcbiAgY29uc3Qgdmlld3BvcnQgPSB1c2VWaWV3cG9ydFNpemUoKTtcbiAgY29uc3QgaXNNb2JpbGUgPSB2aWV3cG9ydD8ud2lkdGhcbiAgICA/IHZpZXdwb3J0Py53aWR0aCA8IGJyZWFrcG9pbnRzLlRhYmxldFxuICAgIDogZmFsc2U7XG5cbiAgY29uc3QgdmVyc2lvbiA9IGNoYW5nZWxvZz8uc3BsaXQoJ2gyJylbMV0/LnJlcGxhY2UoL1s+LzxdKy9nLCAnJyk7XG4gIGNvbnN0IGV4YW1wbGUgPSByZWFkbWU/LnNwbGl0KCdqcycpWzFdPy5zcGxpdCgnYGBgJylbMF0/LnRyaW1TdGFydCgpO1xuICBjb25zdCBvdXRwdXRIVE1MID0gcmVhZG1lPy5zcGxpdCgnYGBgaHRtbCcpWzFdPy5zcGxpdCgnYGBgJylbMF0/LnRyaW1TdGFydCgpO1xuXG4gIGNvbnNvbGUubG9nKHVuaWZpZWQoKVxuICAudXNlKG1hcmtkb3duKVxuICAucGFyc2UocmVhZG1lKSlcblxuICBjb25zdCBtYXJrZG93bkFzdCA9ICh1bmlmaWVkKClcbiAgICAudXNlKG1hcmtkb3duKVxuICAgIC5wYXJzZShyZWFkbWUpIGFzIHVua25vd24pIGFzIFJlYWRtZU1hcmtkb3duO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIHtpc01vYmlsZSA/IChcbiAgICAgICAgPE1vYmlsZUluc3RhbGxcbiAgICAgICAgICBjb21wb25lbnQ9e2NvbXBvbmVudH1cbiAgICAgICAgICB2ZXJzaW9uPXt2ZXJzaW9ufVxuICAgICAgICAgIGNoYW5nZWxvZz17Y2hhbmdlbG9nfVxuICAgICAgICAvPlxuICAgICAgKSA6IChcbiAgICAgICAgPERlc2t0b3BJbnN0YWxsXG4gICAgICAgICAgY29tcG9uZW50PXtjb21wb25lbnR9XG4gICAgICAgICAgdmVyc2lvbj17dmVyc2lvbn1cbiAgICAgICAgICBjaGFuZ2Vsb2c9e2NoYW5nZWxvZ31cbiAgICAgICAgLz5cbiAgICAgICl9XG4gICAgICA8R3JpZENvbnRhaW5lclxuICAgICAgICBhbGlnbj1cImZsZXgtc3RhcnRcIlxuICAgICAgICBqdXN0aWZ5PVwiZmxleC1zdGFydFwiXG4gICAgICAgIGNsYXNzTmFtZT17bWF4V2lkdGh9XG4gICAgICA+XG4gICAgICAgIDxHcmlkSXRlbSBzbT17MTJ9IG1kPXsxMn0geGw9ezEyfT5cbiAgICAgICAgICA8VGFic1xuICAgICAgICAgICAgY2xhc3NOYW1lPXt0YWJzUGFkZGluZ31cbiAgICAgICAgICAgIGFyaWEtbGFiZWw9e2BWaWV3IHNvdXJjZSBjb2RlIGZvciAke2NvbXBvbmVudH0gY29tcG9uZW50YH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7ZXhhbXBsZSAmJiAoXG4gICAgICAgICAgICAgIDxUYWIgZGVmYXVsdCBuYW1lPVwiRXhhbXBsZVwiIGNsYXNzTmFtZT17bXQzfT5cbiAgICAgICAgICAgICAgICA8Q29kZSBzaG93TGluZU51bWJlcnMgbGFuZ3VhZ2U9XCJqc1wiPlxuICAgICAgICAgICAgICAgICAge2V4YW1wbGV9XG4gICAgICAgICAgICAgICAgPC9Db2RlPlxuICAgICAgICAgICAgICA8L1RhYj5cbiAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgIHtvdXRwdXRIVE1MICYmIChcbiAgICAgICAgICAgICAgPFRhYiBuYW1lPVwiT3V0cHV0IEhUTUxcIiBjbGFzc05hbWU9e210M30gZGVmYXVsdD17IWV4YW1wbGV9PlxuICAgICAgICAgICAgICAgIDxDb2RlIHNob3dMaW5lTnVtYmVycyBsYW5ndWFnZT1cInhtbFwiPlxuICAgICAgICAgICAgICAgICAge291dHB1dEhUTUx9XG4gICAgICAgICAgICAgICAgPC9Db2RlPlxuICAgICAgICAgICAgICA8L1RhYj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9UYWJzPlxuICAgICAgICA8L0dyaWRJdGVtPlxuICAgICAgPC9HcmlkQ29udGFpbmVyPlxuICAgICAgPEdyaWRDb250YWluZXIgYWxpZ249XCJmbGV4LXN0YXJ0XCIganVzdGlmeT1cImZsZXgtc3RhcnRcIj5cbiAgICAgICAgPEdyaWRJdGVtIHNtPXsxMn0gbWQ9ezEyfSB4bD17MTJ9PlxuICAgICAgICAgIDxQcm9wVGFibGUgbWFya2Rvd25Bc3Q9e21hcmtkb3duQXN0fSBjb21wb25lbnQ9e2NvbXBvbmVudH0gLz5cbiAgICAgICAgICA8VHlwZURlZmluaXRpb24gbWFya2Rvd25Bc3Q9e21hcmtkb3duQXN0fSByZWFkbWU9e3JlYWRtZX0gLz5cbiAgICAgICAgPC9HcmlkSXRlbT5cbiAgICAgIDwvR3JpZENvbnRhaW5lcj5cbiAgICA8Lz5cbiAgKTtcbn1cblxuQ29kZURvY3MuZGlzcGxheU5hbWUgPSAnQ29kZURvY3MnO1xuXG5leHBvcnQgZGVmYXVsdCBDb2RlRG9jcztcbiJdfQ== */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nvar mt3 =\n/*#__PURE__*/\n\n/*#__PURE__*/\nObject(_emotion_css__WEBPACK_IMPORTED_MODULE_2__[\"css\"])(\"margin-top:\", _leafygreen_ui_tokens__WEBPACK_IMPORTED_MODULE_14__[\"spacing\"][3], \"px;\" + (false ? undefined : \";label:mt3;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", false ? undefined : \";label:mt3;\");\nvar mb1 =\n/*#__PURE__*/\n\n/*#__PURE__*/\nObject(_emotion_css__WEBPACK_IMPORTED_MODULE_2__[\"css\"])(\"margin-bottom:\", _leafygreen_ui_tokens__WEBPACK_IMPORTED_MODULE_14__[\"spacing\"][1], \"px;\" + (false ? undefined : \";label:mb1;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", false ? undefined : \";label:mb1;\");\nvar copyableStyles = /*#__PURE__*/Object(_emotion_css__WEBPACK_IMPORTED_MODULE_2__[\"css\"])(false ? undefined : {\n  name: \"frpj1g-copyableStyles\",\n  styles: \"width:100%;max-width:400px;label:copyableStyles;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nvar versionCard =\n/*#__PURE__*/\n\n/*#__PURE__*/\nObject(_emotion_css__WEBPACK_IMPORTED_MODULE_2__[\"css\"])(\"min-height:106px;padding:\", _leafygreen_ui_tokens__WEBPACK_IMPORTED_MODULE_14__[\"spacing\"][3], \"px \", _leafygreen_ui_tokens__WEBPACK_IMPORTED_MODULE_14__[\"spacing\"][4], \"px;\" + (false ? undefined : \";label:versionCard;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", false ? undefined : \";label:versionCard;\");\nvar subtitlePadding =\n/*#__PURE__*/\n\n/*#__PURE__*/\nObject(_emotion_css__WEBPACK_IMPORTED_MODULE_2__[\"css\"])(\"padding-bottom:\", _leafygreen_ui_tokens__WEBPACK_IMPORTED_MODULE_14__[\"spacing\"][3], \"px;\" + (false ? undefined : \";label:subtitlePadding;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", false ? undefined : \";label:subtitlePadding;\");\nvar tabsPadding =\n/*#__PURE__*/\n\n/*#__PURE__*/\nObject(_emotion_css__WEBPACK_IMPORTED_MODULE_2__[\"css\"])(\"padding-top:\", _leafygreen_ui_tokens__WEBPACK_IMPORTED_MODULE_14__[\"spacing\"][4], \"px;\" + (false ? undefined : \";label:tabsPadding;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", false ? undefined : \";label:tabsPadding;\");\nvar mobileInstallMargin =\n/*#__PURE__*/\n\n/*#__PURE__*/\nObject(_emotion_css__WEBPACK_IMPORTED_MODULE_2__[\"css\"])(\"margin-top:50px;margin-bottom:\", _leafygreen_ui_tokens__WEBPACK_IMPORTED_MODULE_14__[\"spacing\"][3], \"px;\" + (false ? undefined : \";label:mobileInstallMargin;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZlbWNjYXJ0aHkvUmVwb3NpdG9yaWVzL01vbmdvREIvbGVhZnlncmVlbi11aS93ZWJzaXRlL2NvbXBvbmVudHMvQ29kZURvY3MudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlEK0IiLCJmaWxlIjoiL1VzZXJzL2RhdmVtY2NhcnRoeS9SZXBvc2l0b3JpZXMvTW9uZ29EQi9sZWFmeWdyZWVuLXVpL3dlYnNpdGUvY29tcG9uZW50cy9Db2RlRG9jcy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MsIGN4IH0gZnJvbSAnQGVtb3Rpb24vY3NzJztcbmltcG9ydCB1bmlmaWVkIGZyb20gJ3VuaWZpZWQnO1xuaW1wb3J0IG1hcmtkb3duIGZyb20gJ3JlbWFyay1wYXJzZSc7XG5pbXBvcnQgQWN0aXZpdHlGZWVkSWNvbiBmcm9tICdAbGVhZnlncmVlbi11aS9pY29uL2Rpc3QvQWN0aXZpdHlGZWVkJztcbmltcG9ydCBCdXR0b24gZnJvbSAnQGxlYWZ5Z3JlZW4tdWkvYnV0dG9uJztcbmltcG9ydCBDYXJkIGZyb20gJ0BsZWFmeWdyZWVuLXVpL2NhcmQnO1xuaW1wb3J0IENvZGUgZnJvbSAnQGxlYWZ5Z3JlZW4tdWkvY29kZSc7XG5pbXBvcnQgQ29weWFibGUgZnJvbSAnQGxlYWZ5Z3JlZW4tdWkvY29weWFibGUnO1xuaW1wb3J0IE1vZGFsIGZyb20gJ0BsZWFmeWdyZWVuLXVpL21vZGFsJztcbmltcG9ydCB7IFRhYnMsIFRhYiB9IGZyb20gJ0BsZWFmeWdyZWVuLXVpL3RhYnMnO1xuaW1wb3J0IHsgU3VidGl0bGUsIEJvZHkgfSBmcm9tICdAbGVhZnlncmVlbi11aS90eXBvZ3JhcGh5JztcbmltcG9ydCB7IHVpQ29sb3JzIH0gZnJvbSAnQGxlYWZ5Z3JlZW4tdWkvcGFsZXR0ZSc7XG5pbXBvcnQgeyBzcGFjaW5nLCBicmVha3BvaW50cyB9IGZyb20gJ0BsZWFmeWdyZWVuLXVpL3Rva2Vucyc7XG5pbXBvcnQgeyB1c2VWaWV3cG9ydFNpemUgfSBmcm9tICdAbGVhZnlncmVlbi11aS9ob29rcyc7XG5pbXBvcnQgeyBCYXNlTGF5b3V0UHJvcHMgfSBmcm9tICd1dGlscy90eXBlcyc7XG5pbXBvcnQgeyBwYWdlQ29udGFpbmVyV2lkdGggfSBmcm9tICdzdHlsZXMvY29uc3RhbnRzJztcbmltcG9ydCB7IEdyaWRDb250YWluZXIsIEdyaWRJdGVtIH0gZnJvbSAnY29tcG9uZW50cy9HcmlkJztcbmltcG9ydCBQcm9wVGFibGUsIHsgUmVhZG1lTWFya2Rvd24gfSBmcm9tICdjb21wb25lbnRzL1Byb3BUYWJsZSc7XG5pbXBvcnQgVHlwZURlZmluaXRpb24gZnJvbSAnY29tcG9uZW50cy9UeXBlRGVmaW5pdGlvbic7XG5cbmNvbnN0IHRvcEFsaWdubWVudCA9IGNzc2BcbiAgbWFyZ2luLXRvcDogJHtzcGFjaW5nWzRdfXB4O1xuICBwYWRkaW5nLXRvcDogJHtzcGFjaW5nWzNdfXB4O1xuICBtYXJnaW4tYm90dG9tOiAke3NwYWNpbmdbM119cHg7XG5gO1xuXG5jb25zdCB2ZXJzaW9uQ2FyZERlc2t0b3BNYXJnaW4gPSBjc3NgXG4gIG1hcmdpbi1sZWZ0OiAyMHB4O1xuYDtcblxuY29uc3QgbXQzID0gY3NzYFxuICBtYXJnaW4tdG9wOiAke3NwYWNpbmdbM119cHg7XG5gO1xuXG5jb25zdCBtYjEgPSBjc3NgXG4gIG1hcmdpbi1ib3R0b206ICR7c3BhY2luZ1sxXX1weDtcbmA7XG5cbmNvbnN0IGNvcHlhYmxlU3R5bGVzID0gY3NzYFxuICB3aWR0aDogMTAwJTtcbiAgbWF4LXdpZHRoOiA0MDBweDtcbmA7XG5cbmNvbnN0IHZlcnNpb25DYXJkID0gY3NzYFxuICBtaW4taGVpZ2h0OiAxMDZweDtcbiAgcGFkZGluZzogJHtzcGFjaW5nWzNdfXB4ICR7c3BhY2luZ1s0XX1weDtcbmA7XG5cbmNvbnN0IHN1YnRpdGxlUGFkZGluZyA9IGNzc2BcbiAgcGFkZGluZy1ib3R0b206ICR7c3BhY2luZ1szXX1weDtcbmA7XG5cbmNvbnN0IHRhYnNQYWRkaW5nID0gY3NzYFxuICBwYWRkaW5nLXRvcDogJHtzcGFjaW5nWzRdfXB4O1xuYDtcblxuY29uc3QgbW9iaWxlSW5zdGFsbE1hcmdpbiA9IGNzc2BcbiAgbWFyZ2luLXRvcDogNTBweDtcbiAgbWFyZ2luLWJvdHRvbTogJHtzcGFjaW5nWzNdfXB4O1xuYDtcblxuY29uc3QgY2hhbmdlbG9nU3R5bGVzID0gY3NzYFxuICBjb2xvcjogJHt1aUNvbG9ycy5ncmF5LmRhcmszfTtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG5cbiAgJiA+IGgyIHtcbiAgICBwYWRkaW5nLXRvcDogJHtzcGFjaW5nWzNdfXB4O1xuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAke3VpQ29sb3JzLmdyYXkubGlnaHQyfTtcbiAgfVxuXG4gIGEge1xuICAgIGNvbG9yOiAke3VpQ29sb3JzLmdyYXkuZGFyazN9O1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgfVxuYDtcblxuY29uc3QgbWF4V2lkdGggPSBjc3NgXG4gIG1heC13aWR0aDogJHtwYWdlQ29udGFpbmVyV2lkdGguZGVmYXVsdH1weDtcbmA7XG5cbmludGVyZmFjZSBWZXJzaW9uQ2FyZFByb3BzIHtcbiAgdmVyc2lvbj86IHN0cmluZztcbiAgY2hhbmdlbG9nOiBzdHJpbmc7XG4gIGlzTW9iaWxlPzogYm9vbGVhbjtcbn1cblxuaW50ZXJmYWNlIEluc3RhbGxQcm9wcyB7XG4gIGNvbXBvbmVudDogc3RyaW5nO1xuICB2ZXJzaW9uPzogc3RyaW5nO1xuICBjaGFuZ2Vsb2c6IHN0cmluZztcbn1cblxuZnVuY3Rpb24gVmVyc2lvbkNhcmQoe1xuICB2ZXJzaW9uLFxuICBjaGFuZ2Vsb2csXG4gIGlzTW9iaWxlID0gZmFsc2UsXG59OiBWZXJzaW9uQ2FyZFByb3BzKSB7XG4gIGNvbnN0IFtvcGVuTW9kYWwsIHNldE9wZW5Nb2RhbF0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgcmV0dXJuIChcbiAgICA8Q2FyZCBjbGFzc05hbWU9e2N4KHRvcEFsaWdubWVudCwgdmVyc2lvbkNhcmQpfT5cbiAgICAgIDxTdWJ0aXRsZSBhcz1cImgyXCIgY2xhc3NOYW1lPXtzdWJ0aXRsZVBhZGRpbmd9PlxuICAgICAgICBWZXJzaW9uIHt2ZXJzaW9ufVxuICAgICAgPC9TdWJ0aXRsZT5cbiAgICAgIDxCdXR0b25cbiAgICAgICAgc2l6ZT17aXNNb2JpbGUgPyAnbGFyZ2UnIDogJ2RlZmF1bHQnfVxuICAgICAgICBsZWZ0R2x5cGg9ezxBY3Rpdml0eUZlZWRJY29uIC8+fVxuICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRPcGVuTW9kYWwoY3VyciA9PiAhY3Vycil9XG4gICAgICAgIGNsYXNzTmFtZT17Y3goe1xuICAgICAgICAgIFtjc3NgXG4gICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBgXTogaXNNb2JpbGUsXG4gICAgICAgIH0pfVxuICAgICAgPlxuICAgICAgICBWaWV3IENoYW5nZWxvZ1xuICAgICAgPC9CdXR0b24+XG4gICAgICA8TW9kYWxcbiAgICAgICAgY2xhc3NOYW1lPXtjc3NgXG4gICAgICAgICAgei1pbmRleDogMTtcbiAgICAgICAgYH1cbiAgICAgICAgb3Blbj17b3Blbk1vZGFsfVxuICAgICAgICBzZXRPcGVuPXtzZXRPcGVuTW9kYWx9XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzc05hbWU9e2NoYW5nZWxvZ1N0eWxlc31cbiAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IGNoYW5nZWxvZyB9fVxuICAgICAgICA+PC9kaXY+XG4gICAgICA8L01vZGFsPlxuICAgIDwvQ2FyZD5cbiAgKTtcbn1cblxuVmVyc2lvbkNhcmQuZGlzcGxheU5hbWUgPSAnVmVyc2lvbkNhcmQnO1xuXG5mdW5jdGlvbiBNb2JpbGVJbnN0YWxsKHsgY29tcG9uZW50LCB2ZXJzaW9uLCBjaGFuZ2Vsb2cgfTogSW5zdGFsbFByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPEdyaWRDb250YWluZXI+XG4gICAgICA8R3JpZEl0ZW0gc209ezEyfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e21vYmlsZUluc3RhbGxNYXJnaW59PlxuICAgICAgICAgIDxTdWJ0aXRsZSBhcz1cImgyXCI+SW5zdGFsbGF0aW9uPC9TdWJ0aXRsZT5cbiAgICAgICAgICA8Qm9keSB3ZWlnaHQ9XCJtZWRpdW1cIiBjbGFzc05hbWU9e210M30+XG4gICAgICAgICAgICBZYXJuXG4gICAgICAgICAgPC9Cb2R5PlxuICAgICAgICAgIDxDb3B5YWJsZVxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjb3B5YWJsZVN0eWxlc31cbiAgICAgICAgICA+e2B5YXJuIGFkZCBAbGVhZnlncmVlbi11aS8ke2NvbXBvbmVudH1gfTwvQ29weWFibGU+XG4gICAgICAgICAgPEJvZHkgd2VpZ2h0PVwibWVkaXVtXCIgY2xhc3NOYW1lPXttdDN9PlxuICAgICAgICAgICAgTlBNXG4gICAgICAgICAgPC9Cb2R5PlxuICAgICAgICAgIDxDb3B5YWJsZVxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjb3B5YWJsZVN0eWxlc31cbiAgICAgICAgICA+e2BucG0gaW5zdGFsbCBAbGVhZnlncmVlbi11aS8ke2NvbXBvbmVudH1gfTwvQ29weWFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9HcmlkSXRlbT5cbiAgICAgIDxHcmlkSXRlbSBzbT17MTJ9PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxWZXJzaW9uQ2FyZCB2ZXJzaW9uPXt2ZXJzaW9ufSBjaGFuZ2Vsb2c9e2NoYW5nZWxvZ30gaXNNb2JpbGUgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L0dyaWRJdGVtPlxuICAgIDwvR3JpZENvbnRhaW5lcj5cbiAgKTtcbn1cblxuTW9iaWxlSW5zdGFsbC5kaXNwbGF5TmFtZSA9ICdNb2JpbGVJbnN0YWxsJztcblxuZnVuY3Rpb24gRGVza3RvcEluc3RhbGwoeyBjb21wb25lbnQsIGNoYW5nZWxvZywgdmVyc2lvbiB9OiBJbnN0YWxsUHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPEdyaWRDb250YWluZXJcbiAgICAgICAganVzdGlmeT1cInNwYWNlLWJldHdlZW5cIlxuICAgICAgICBhbGlnbj1cImZsZXgtc3RhcnRcIlxuICAgICAgICBjbGFzc05hbWU9e21heFdpZHRofVxuICAgICAgPlxuICAgICAgICA8R3JpZEl0ZW0gbWQ9ezd9IGxnPXs3fT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17dG9wQWxpZ25tZW50fT5cbiAgICAgICAgICAgIDxTdWJ0aXRsZVxuICAgICAgICAgICAgICBhcz1cImgyXCJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjc3NgXG4gICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogJHtzcGFjaW5nWzNdfXB4O1xuICAgICAgICAgICAgICBgfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICBJbnN0YWxsYXRpb25cbiAgICAgICAgICAgIDwvU3VidGl0bGU+XG4gICAgICAgICAgICA8Qm9keSB3ZWlnaHQ9XCJtZWRpdW1cIiBjbGFzc05hbWU9e21iMX0+XG4gICAgICAgICAgICAgIFlhcm5cbiAgICAgICAgICAgIDwvQm9keT5cbiAgICAgICAgICAgIDxDb3B5YWJsZT57YHlhcm4gYWRkIEBsZWFmeWdyZWVuLXVpLyR7Y29tcG9uZW50fWB9PC9Db3B5YWJsZT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9HcmlkSXRlbT5cbiAgICAgICAgPEdyaWRJdGVtIG1kPXs1fSBsZz17NX0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3ZlcnNpb25DYXJkRGVza3RvcE1hcmdpbn0+XG4gICAgICAgICAgICA8VmVyc2lvbkNhcmQgY2hhbmdlbG9nPXtjaGFuZ2Vsb2d9IHZlcnNpb249e3ZlcnNpb259IC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvR3JpZEl0ZW0+XG4gICAgICA8L0dyaWRDb250YWluZXI+XG4gICAgICA8R3JpZENvbnRhaW5lciBhbGlnbj1cImZsZXgtc3RhcnRcIiBqdXN0aWZ5PVwiZmxleC1zdGFydFwiPlxuICAgICAgICA8R3JpZEl0ZW0gbWQ9ezd9IGxnPXs3fT5cbiAgICAgICAgICA8Qm9keSB3ZWlnaHQ9XCJtZWRpdW1cIiBjbGFzc05hbWU9e21iMX0+XG4gICAgICAgICAgICBOUE1cbiAgICAgICAgICA8L0JvZHk+XG4gICAgICAgICAgPENvcHlhYmxlPntgbnBtIGluc3RhbGwgQGxlYWZ5Z3JlZW4tdWkvJHtjb21wb25lbnR9YH08L0NvcHlhYmxlPlxuICAgICAgICA8L0dyaWRJdGVtPlxuICAgICAgPC9HcmlkQ29udGFpbmVyPlxuICAgIDwvPlxuICApO1xufVxuXG5EZXNrdG9wSW5zdGFsbC5kaXNwbGF5TmFtZSA9ICdEZXNrdG9wSW5zdGFsbCc7XG5cbmZ1bmN0aW9uIENvZGVEb2NzKHsgY29tcG9uZW50LCByZWFkbWUsIGNoYW5nZWxvZyB9OiBCYXNlTGF5b3V0UHJvcHMpIHtcbiAgY29uc3Qgdmlld3BvcnQgPSB1c2VWaWV3cG9ydFNpemUoKTtcbiAgY29uc3QgaXNNb2JpbGUgPSB2aWV3cG9ydD8ud2lkdGhcbiAgICA/IHZpZXdwb3J0Py53aWR0aCA8IGJyZWFrcG9pbnRzLlRhYmxldFxuICAgIDogZmFsc2U7XG5cbiAgY29uc3QgdmVyc2lvbiA9IGNoYW5nZWxvZz8uc3BsaXQoJ2gyJylbMV0/LnJlcGxhY2UoL1s+LzxdKy9nLCAnJyk7XG4gIGNvbnN0IGV4YW1wbGUgPSByZWFkbWU/LnNwbGl0KCdqcycpWzFdPy5zcGxpdCgnYGBgJylbMF0/LnRyaW1TdGFydCgpO1xuICBjb25zdCBvdXRwdXRIVE1MID0gcmVhZG1lPy5zcGxpdCgnYGBgaHRtbCcpWzFdPy5zcGxpdCgnYGBgJylbMF0/LnRyaW1TdGFydCgpO1xuXG4gIGNvbnNvbGUubG9nKHVuaWZpZWQoKVxuICAudXNlKG1hcmtkb3duKVxuICAucGFyc2UocmVhZG1lKSlcblxuICBjb25zdCBtYXJrZG93bkFzdCA9ICh1bmlmaWVkKClcbiAgICAudXNlKG1hcmtkb3duKVxuICAgIC5wYXJzZShyZWFkbWUpIGFzIHVua25vd24pIGFzIFJlYWRtZU1hcmtkb3duO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIHtpc01vYmlsZSA/IChcbiAgICAgICAgPE1vYmlsZUluc3RhbGxcbiAgICAgICAgICBjb21wb25lbnQ9e2NvbXBvbmVudH1cbiAgICAgICAgICB2ZXJzaW9uPXt2ZXJzaW9ufVxuICAgICAgICAgIGNoYW5nZWxvZz17Y2hhbmdlbG9nfVxuICAgICAgICAvPlxuICAgICAgKSA6IChcbiAgICAgICAgPERlc2t0b3BJbnN0YWxsXG4gICAgICAgICAgY29tcG9uZW50PXtjb21wb25lbnR9XG4gICAgICAgICAgdmVyc2lvbj17dmVyc2lvbn1cbiAgICAgICAgICBjaGFuZ2Vsb2c9e2NoYW5nZWxvZ31cbiAgICAgICAgLz5cbiAgICAgICl9XG4gICAgICA8R3JpZENvbnRhaW5lclxuICAgICAgICBhbGlnbj1cImZsZXgtc3RhcnRcIlxuICAgICAgICBqdXN0aWZ5PVwiZmxleC1zdGFydFwiXG4gICAgICAgIGNsYXNzTmFtZT17bWF4V2lkdGh9XG4gICAgICA+XG4gICAgICAgIDxHcmlkSXRlbSBzbT17MTJ9IG1kPXsxMn0geGw9ezEyfT5cbiAgICAgICAgICA8VGFic1xuICAgICAgICAgICAgY2xhc3NOYW1lPXt0YWJzUGFkZGluZ31cbiAgICAgICAgICAgIGFyaWEtbGFiZWw9e2BWaWV3IHNvdXJjZSBjb2RlIGZvciAke2NvbXBvbmVudH0gY29tcG9uZW50YH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7ZXhhbXBsZSAmJiAoXG4gICAgICAgICAgICAgIDxUYWIgZGVmYXVsdCBuYW1lPVwiRXhhbXBsZVwiIGNsYXNzTmFtZT17bXQzfT5cbiAgICAgICAgICAgICAgICA8Q29kZSBzaG93TGluZU51bWJlcnMgbGFuZ3VhZ2U9XCJqc1wiPlxuICAgICAgICAgICAgICAgICAge2V4YW1wbGV9XG4gICAgICAgICAgICAgICAgPC9Db2RlPlxuICAgICAgICAgICAgICA8L1RhYj5cbiAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgIHtvdXRwdXRIVE1MICYmIChcbiAgICAgICAgICAgICAgPFRhYiBuYW1lPVwiT3V0cHV0IEhUTUxcIiBjbGFzc05hbWU9e210M30gZGVmYXVsdD17IWV4YW1wbGV9PlxuICAgICAgICAgICAgICAgIDxDb2RlIHNob3dMaW5lTnVtYmVycyBsYW5ndWFnZT1cInhtbFwiPlxuICAgICAgICAgICAgICAgICAge291dHB1dEhUTUx9XG4gICAgICAgICAgICAgICAgPC9Db2RlPlxuICAgICAgICAgICAgICA8L1RhYj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9UYWJzPlxuICAgICAgICA8L0dyaWRJdGVtPlxuICAgICAgPC9HcmlkQ29udGFpbmVyPlxuICAgICAgPEdyaWRDb250YWluZXIgYWxpZ249XCJmbGV4LXN0YXJ0XCIganVzdGlmeT1cImZsZXgtc3RhcnRcIj5cbiAgICAgICAgPEdyaWRJdGVtIHNtPXsxMn0gbWQ9ezEyfSB4bD17MTJ9PlxuICAgICAgICAgIDxQcm9wVGFibGUgbWFya2Rvd25Bc3Q9e21hcmtkb3duQXN0fSBjb21wb25lbnQ9e2NvbXBvbmVudH0gLz5cbiAgICAgICAgICA8VHlwZURlZmluaXRpb24gbWFya2Rvd25Bc3Q9e21hcmtkb3duQXN0fSByZWFkbWU9e3JlYWRtZX0gLz5cbiAgICAgICAgPC9HcmlkSXRlbT5cbiAgICAgIDwvR3JpZENvbnRhaW5lcj5cbiAgICA8Lz5cbiAgKTtcbn1cblxuQ29kZURvY3MuZGlzcGxheU5hbWUgPSAnQ29kZURvY3MnO1xuXG5leHBvcnQgZGVmYXVsdCBDb2RlRG9jcztcbiJdfQ== */\", false ? undefined : \";label:mobileInstallMargin;\");\nvar changelogStyles =\n/*#__PURE__*/\n\n/*#__PURE__*/\nObject(_emotion_css__WEBPACK_IMPORTED_MODULE_2__[\"css\"])(\"color:\", _leafygreen_ui_palette__WEBPACK_IMPORTED_MODULE_13__[\"uiColors\"].gray.dark3, \";pointer-events:none;&>h2{padding-top:\", _leafygreen_ui_tokens__WEBPACK_IMPORTED_MODULE_14__[\"spacing\"][3], \"px;border-top:1px solid \", _leafygreen_ui_palette__WEBPACK_IMPORTED_MODULE_13__[\"uiColors\"].gray.light2, \";}a{color:\", _leafygreen_ui_palette__WEBPACK_IMPORTED_MODULE_13__[\"uiColors\"].gray.dark3, \";text-decoration:none;}\" + (false ? undefined : \";label:changelogStyles;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", false ? undefined : \";label:changelogStyles;\");\nvar maxWidth =\n/*#__PURE__*/\n\n/*#__PURE__*/\nObject(_emotion_css__WEBPACK_IMPORTED_MODULE_2__[\"css\"])(\"max-width:\", styles_constants__WEBPACK_IMPORTED_MODULE_16__[\"pageContainerWidth\"][\"default\"], \"px;\" + (false ? undefined : \";label:maxWidth;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", false ? undefined : \";label:maxWidth;\");\n\nfunction VersionCard(_ref) {\n  _s();\n\n  var version = _ref.version,\n      changelog = _ref.changelog,\n      _ref$isMobile = _ref.isMobile,\n      isMobile = _ref$isMobile === void 0 ? false : _ref$isMobile;\n\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(false),\n      openModal = _useState[0],\n      setOpenModal = _useState[1];\n\n  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_leafygreen_ui_card__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n    className: Object(_emotion_css__WEBPACK_IMPORTED_MODULE_2__[\"cx\"])(topAlignment, versionCard),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_leafygreen_ui_typography__WEBPACK_IMPORTED_MODULE_12__[\"Subtitle\"], {\n    as: \"h2\",\n    className: subtitlePadding,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, \"Version \", version), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_leafygreen_ui_button__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n    size: isMobile ? 'large' : 'default',\n    leftGlyph: Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_leafygreen_ui_icon_dist_ActivityFeed__WEBPACK_IMPORTED_MODULE_5___default.a, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 20\n      }\n    }),\n    onClick: function onClick() {\n      return setOpenModal(function (curr) {\n        return !curr;\n      });\n    },\n    className: Object(_emotion_css__WEBPACK_IMPORTED_MODULE_2__[\"cx\"])(Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, /*#__PURE__*/Object(_emotion_css__WEBPACK_IMPORTED_MODULE_2__[\"css\"])(false ? undefined : {\n      name: \"1d3w5wq\",\n      styles: \"width:100%\",\n      map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n      toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n    }), isMobile)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, \"View Changelog\"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_leafygreen_ui_modal__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n    className: /*#__PURE__*/Object(_emotion_css__WEBPACK_IMPORTED_MODULE_2__[\"css\"])(false ? undefined : {\n      name: \"u14jgt-VersionCard\",\n      styles: \"z-index:1;label:VersionCard;\",\n      map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZlbWNjYXJ0aHkvUmVwb3NpdG9yaWVzL01vbmdvREIvbGVhZnlncmVlbi11aS93ZWJzaXRlL2NvbXBvbmVudHMvQ29kZURvY3MudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNIc0IiLCJmaWxlIjoiL1VzZXJzL2RhdmVtY2NhcnRoeS9SZXBvc2l0b3JpZXMvTW9uZ29EQi9sZWFmeWdyZWVuLXVpL3dlYnNpdGUvY29tcG9uZW50cy9Db2RlRG9jcy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MsIGN4IH0gZnJvbSAnQGVtb3Rpb24vY3NzJztcbmltcG9ydCB1bmlmaWVkIGZyb20gJ3VuaWZpZWQnO1xuaW1wb3J0IG1hcmtkb3duIGZyb20gJ3JlbWFyay1wYXJzZSc7XG5pbXBvcnQgQWN0aXZpdHlGZWVkSWNvbiBmcm9tICdAbGVhZnlncmVlbi11aS9pY29uL2Rpc3QvQWN0aXZpdHlGZWVkJztcbmltcG9ydCBCdXR0b24gZnJvbSAnQGxlYWZ5Z3JlZW4tdWkvYnV0dG9uJztcbmltcG9ydCBDYXJkIGZyb20gJ0BsZWFmeWdyZWVuLXVpL2NhcmQnO1xuaW1wb3J0IENvZGUgZnJvbSAnQGxlYWZ5Z3JlZW4tdWkvY29kZSc7XG5pbXBvcnQgQ29weWFibGUgZnJvbSAnQGxlYWZ5Z3JlZW4tdWkvY29weWFibGUnO1xuaW1wb3J0IE1vZGFsIGZyb20gJ0BsZWFmeWdyZWVuLXVpL21vZGFsJztcbmltcG9ydCB7IFRhYnMsIFRhYiB9IGZyb20gJ0BsZWFmeWdyZWVuLXVpL3RhYnMnO1xuaW1wb3J0IHsgU3VidGl0bGUsIEJvZHkgfSBmcm9tICdAbGVhZnlncmVlbi11aS90eXBvZ3JhcGh5JztcbmltcG9ydCB7IHVpQ29sb3JzIH0gZnJvbSAnQGxlYWZ5Z3JlZW4tdWkvcGFsZXR0ZSc7XG5pbXBvcnQgeyBzcGFjaW5nLCBicmVha3BvaW50cyB9IGZyb20gJ0BsZWFmeWdyZWVuLXVpL3Rva2Vucyc7XG5pbXBvcnQgeyB1c2VWaWV3cG9ydFNpemUgfSBmcm9tICdAbGVhZnlncmVlbi11aS9ob29rcyc7XG5pbXBvcnQgeyBCYXNlTGF5b3V0UHJvcHMgfSBmcm9tICd1dGlscy90eXBlcyc7XG5pbXBvcnQgeyBwYWdlQ29udGFpbmVyV2lkdGggfSBmcm9tICdzdHlsZXMvY29uc3RhbnRzJztcbmltcG9ydCB7IEdyaWRDb250YWluZXIsIEdyaWRJdGVtIH0gZnJvbSAnY29tcG9uZW50cy9HcmlkJztcbmltcG9ydCBQcm9wVGFibGUsIHsgUmVhZG1lTWFya2Rvd24gfSBmcm9tICdjb21wb25lbnRzL1Byb3BUYWJsZSc7XG5pbXBvcnQgVHlwZURlZmluaXRpb24gZnJvbSAnY29tcG9uZW50cy9UeXBlRGVmaW5pdGlvbic7XG5cbmNvbnN0IHRvcEFsaWdubWVudCA9IGNzc2BcbiAgbWFyZ2luLXRvcDogJHtzcGFjaW5nWzRdfXB4O1xuICBwYWRkaW5nLXRvcDogJHtzcGFjaW5nWzNdfXB4O1xuICBtYXJnaW4tYm90dG9tOiAke3NwYWNpbmdbM119cHg7XG5gO1xuXG5jb25zdCB2ZXJzaW9uQ2FyZERlc2t0b3BNYXJnaW4gPSBjc3NgXG4gIG1hcmdpbi1sZWZ0OiAyMHB4O1xuYDtcblxuY29uc3QgbXQzID0gY3NzYFxuICBtYXJnaW4tdG9wOiAke3NwYWNpbmdbM119cHg7XG5gO1xuXG5jb25zdCBtYjEgPSBjc3NgXG4gIG1hcmdpbi1ib3R0b206ICR7c3BhY2luZ1sxXX1weDtcbmA7XG5cbmNvbnN0IGNvcHlhYmxlU3R5bGVzID0gY3NzYFxuICB3aWR0aDogMTAwJTtcbiAgbWF4LXdpZHRoOiA0MDBweDtcbmA7XG5cbmNvbnN0IHZlcnNpb25DYXJkID0gY3NzYFxuICBtaW4taGVpZ2h0OiAxMDZweDtcbiAgcGFkZGluZzogJHtzcGFjaW5nWzNdfXB4ICR7c3BhY2luZ1s0XX1weDtcbmA7XG5cbmNvbnN0IHN1YnRpdGxlUGFkZGluZyA9IGNzc2BcbiAgcGFkZGluZy1ib3R0b206ICR7c3BhY2luZ1szXX1weDtcbmA7XG5cbmNvbnN0IHRhYnNQYWRkaW5nID0gY3NzYFxuICBwYWRkaW5nLXRvcDogJHtzcGFjaW5nWzRdfXB4O1xuYDtcblxuY29uc3QgbW9iaWxlSW5zdGFsbE1hcmdpbiA9IGNzc2BcbiAgbWFyZ2luLXRvcDogNTBweDtcbiAgbWFyZ2luLWJvdHRvbTogJHtzcGFjaW5nWzNdfXB4O1xuYDtcblxuY29uc3QgY2hhbmdlbG9nU3R5bGVzID0gY3NzYFxuICBjb2xvcjogJHt1aUNvbG9ycy5ncmF5LmRhcmszfTtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG5cbiAgJiA+IGgyIHtcbiAgICBwYWRkaW5nLXRvcDogJHtzcGFjaW5nWzNdfXB4O1xuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAke3VpQ29sb3JzLmdyYXkubGlnaHQyfTtcbiAgfVxuXG4gIGEge1xuICAgIGNvbG9yOiAke3VpQ29sb3JzLmdyYXkuZGFyazN9O1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgfVxuYDtcblxuY29uc3QgbWF4V2lkdGggPSBjc3NgXG4gIG1heC13aWR0aDogJHtwYWdlQ29udGFpbmVyV2lkdGguZGVmYXVsdH1weDtcbmA7XG5cbmludGVyZmFjZSBWZXJzaW9uQ2FyZFByb3BzIHtcbiAgdmVyc2lvbj86IHN0cmluZztcbiAgY2hhbmdlbG9nOiBzdHJpbmc7XG4gIGlzTW9iaWxlPzogYm9vbGVhbjtcbn1cblxuaW50ZXJmYWNlIEluc3RhbGxQcm9wcyB7XG4gIGNvbXBvbmVudDogc3RyaW5nO1xuICB2ZXJzaW9uPzogc3RyaW5nO1xuICBjaGFuZ2Vsb2c6IHN0cmluZztcbn1cblxuZnVuY3Rpb24gVmVyc2lvbkNhcmQoe1xuICB2ZXJzaW9uLFxuICBjaGFuZ2Vsb2csXG4gIGlzTW9iaWxlID0gZmFsc2UsXG59OiBWZXJzaW9uQ2FyZFByb3BzKSB7XG4gIGNvbnN0IFtvcGVuTW9kYWwsIHNldE9wZW5Nb2RhbF0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgcmV0dXJuIChcbiAgICA8Q2FyZCBjbGFzc05hbWU9e2N4KHRvcEFsaWdubWVudCwgdmVyc2lvbkNhcmQpfT5cbiAgICAgIDxTdWJ0aXRsZSBhcz1cImgyXCIgY2xhc3NOYW1lPXtzdWJ0aXRsZVBhZGRpbmd9PlxuICAgICAgICBWZXJzaW9uIHt2ZXJzaW9ufVxuICAgICAgPC9TdWJ0aXRsZT5cbiAgICAgIDxCdXR0b25cbiAgICAgICAgc2l6ZT17aXNNb2JpbGUgPyAnbGFyZ2UnIDogJ2RlZmF1bHQnfVxuICAgICAgICBsZWZ0R2x5cGg9ezxBY3Rpdml0eUZlZWRJY29uIC8+fVxuICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRPcGVuTW9kYWwoY3VyciA9PiAhY3Vycil9XG4gICAgICAgIGNsYXNzTmFtZT17Y3goe1xuICAgICAgICAgIFtjc3NgXG4gICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBgXTogaXNNb2JpbGUsXG4gICAgICAgIH0pfVxuICAgICAgPlxuICAgICAgICBWaWV3IENoYW5nZWxvZ1xuICAgICAgPC9CdXR0b24+XG4gICAgICA8TW9kYWxcbiAgICAgICAgY2xhc3NOYW1lPXtjc3NgXG4gICAgICAgICAgei1pbmRleDogMTtcbiAgICAgICAgYH1cbiAgICAgICAgb3Blbj17b3Blbk1vZGFsfVxuICAgICAgICBzZXRPcGVuPXtzZXRPcGVuTW9kYWx9XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzc05hbWU9e2NoYW5nZWxvZ1N0eWxlc31cbiAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IGNoYW5nZWxvZyB9fVxuICAgICAgICA+PC9kaXY+XG4gICAgICA8L01vZGFsPlxuICAgIDwvQ2FyZD5cbiAgKTtcbn1cblxuVmVyc2lvbkNhcmQuZGlzcGxheU5hbWUgPSAnVmVyc2lvbkNhcmQnO1xuXG5mdW5jdGlvbiBNb2JpbGVJbnN0YWxsKHsgY29tcG9uZW50LCB2ZXJzaW9uLCBjaGFuZ2Vsb2cgfTogSW5zdGFsbFByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPEdyaWRDb250YWluZXI+XG4gICAgICA8R3JpZEl0ZW0gc209ezEyfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e21vYmlsZUluc3RhbGxNYXJnaW59PlxuICAgICAgICAgIDxTdWJ0aXRsZSBhcz1cImgyXCI+SW5zdGFsbGF0aW9uPC9TdWJ0aXRsZT5cbiAgICAgICAgICA8Qm9keSB3ZWlnaHQ9XCJtZWRpdW1cIiBjbGFzc05hbWU9e210M30+XG4gICAgICAgICAgICBZYXJuXG4gICAgICAgICAgPC9Cb2R5PlxuICAgICAgICAgIDxDb3B5YWJsZVxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjb3B5YWJsZVN0eWxlc31cbiAgICAgICAgICA+e2B5YXJuIGFkZCBAbGVhZnlncmVlbi11aS8ke2NvbXBvbmVudH1gfTwvQ29weWFibGU+XG4gICAgICAgICAgPEJvZHkgd2VpZ2h0PVwibWVkaXVtXCIgY2xhc3NOYW1lPXttdDN9PlxuICAgICAgICAgICAgTlBNXG4gICAgICAgICAgPC9Cb2R5PlxuICAgICAgICAgIDxDb3B5YWJsZVxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjb3B5YWJsZVN0eWxlc31cbiAgICAgICAgICA+e2BucG0gaW5zdGFsbCBAbGVhZnlncmVlbi11aS8ke2NvbXBvbmVudH1gfTwvQ29weWFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9HcmlkSXRlbT5cbiAgICAgIDxHcmlkSXRlbSBzbT17MTJ9PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxWZXJzaW9uQ2FyZCB2ZXJzaW9uPXt2ZXJzaW9ufSBjaGFuZ2Vsb2c9e2NoYW5nZWxvZ30gaXNNb2JpbGUgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L0dyaWRJdGVtPlxuICAgIDwvR3JpZENvbnRhaW5lcj5cbiAgKTtcbn1cblxuTW9iaWxlSW5zdGFsbC5kaXNwbGF5TmFtZSA9ICdNb2JpbGVJbnN0YWxsJztcblxuZnVuY3Rpb24gRGVza3RvcEluc3RhbGwoeyBjb21wb25lbnQsIGNoYW5nZWxvZywgdmVyc2lvbiB9OiBJbnN0YWxsUHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPEdyaWRDb250YWluZXJcbiAgICAgICAganVzdGlmeT1cInNwYWNlLWJldHdlZW5cIlxuICAgICAgICBhbGlnbj1cImZsZXgtc3RhcnRcIlxuICAgICAgICBjbGFzc05hbWU9e21heFdpZHRofVxuICAgICAgPlxuICAgICAgICA8R3JpZEl0ZW0gbWQ9ezd9IGxnPXs3fT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17dG9wQWxpZ25tZW50fT5cbiAgICAgICAgICAgIDxTdWJ0aXRsZVxuICAgICAgICAgICAgICBhcz1cImgyXCJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjc3NgXG4gICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogJHtzcGFjaW5nWzNdfXB4O1xuICAgICAgICAgICAgICBgfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICBJbnN0YWxsYXRpb25cbiAgICAgICAgICAgIDwvU3VidGl0bGU+XG4gICAgICAgICAgICA8Qm9keSB3ZWlnaHQ9XCJtZWRpdW1cIiBjbGFzc05hbWU9e21iMX0+XG4gICAgICAgICAgICAgIFlhcm5cbiAgICAgICAgICAgIDwvQm9keT5cbiAgICAgICAgICAgIDxDb3B5YWJsZT57YHlhcm4gYWRkIEBsZWFmeWdyZWVuLXVpLyR7Y29tcG9uZW50fWB9PC9Db3B5YWJsZT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9HcmlkSXRlbT5cbiAgICAgICAgPEdyaWRJdGVtIG1kPXs1fSBsZz17NX0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3ZlcnNpb25DYXJkRGVza3RvcE1hcmdpbn0+XG4gICAgICAgICAgICA8VmVyc2lvbkNhcmQgY2hhbmdlbG9nPXtjaGFuZ2Vsb2d9IHZlcnNpb249e3ZlcnNpb259IC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvR3JpZEl0ZW0+XG4gICAgICA8L0dyaWRDb250YWluZXI+XG4gICAgICA8R3JpZENvbnRhaW5lciBhbGlnbj1cImZsZXgtc3RhcnRcIiBqdXN0aWZ5PVwiZmxleC1zdGFydFwiPlxuICAgICAgICA8R3JpZEl0ZW0gbWQ9ezd9IGxnPXs3fT5cbiAgICAgICAgICA8Qm9keSB3ZWlnaHQ9XCJtZWRpdW1cIiBjbGFzc05hbWU9e21iMX0+XG4gICAgICAgICAgICBOUE1cbiAgICAgICAgICA8L0JvZHk+XG4gICAgICAgICAgPENvcHlhYmxlPntgbnBtIGluc3RhbGwgQGxlYWZ5Z3JlZW4tdWkvJHtjb21wb25lbnR9YH08L0NvcHlhYmxlPlxuICAgICAgICA8L0dyaWRJdGVtPlxuICAgICAgPC9HcmlkQ29udGFpbmVyPlxuICAgIDwvPlxuICApO1xufVxuXG5EZXNrdG9wSW5zdGFsbC5kaXNwbGF5TmFtZSA9ICdEZXNrdG9wSW5zdGFsbCc7XG5cbmZ1bmN0aW9uIENvZGVEb2NzKHsgY29tcG9uZW50LCByZWFkbWUsIGNoYW5nZWxvZyB9OiBCYXNlTGF5b3V0UHJvcHMpIHtcbiAgY29uc3Qgdmlld3BvcnQgPSB1c2VWaWV3cG9ydFNpemUoKTtcbiAgY29uc3QgaXNNb2JpbGUgPSB2aWV3cG9ydD8ud2lkdGhcbiAgICA/IHZpZXdwb3J0Py53aWR0aCA8IGJyZWFrcG9pbnRzLlRhYmxldFxuICAgIDogZmFsc2U7XG5cbiAgY29uc3QgdmVyc2lvbiA9IGNoYW5nZWxvZz8uc3BsaXQoJ2gyJylbMV0/LnJlcGxhY2UoL1s+LzxdKy9nLCAnJyk7XG4gIGNvbnN0IGV4YW1wbGUgPSByZWFkbWU/LnNwbGl0KCdqcycpWzFdPy5zcGxpdCgnYGBgJylbMF0/LnRyaW1TdGFydCgpO1xuICBjb25zdCBvdXRwdXRIVE1MID0gcmVhZG1lPy5zcGxpdCgnYGBgaHRtbCcpWzFdPy5zcGxpdCgnYGBgJylbMF0/LnRyaW1TdGFydCgpO1xuXG4gIGNvbnNvbGUubG9nKHVuaWZpZWQoKVxuICAudXNlKG1hcmtkb3duKVxuICAucGFyc2UocmVhZG1lKSlcblxuICBjb25zdCBtYXJrZG93bkFzdCA9ICh1bmlmaWVkKClcbiAgICAudXNlKG1hcmtkb3duKVxuICAgIC5wYXJzZShyZWFkbWUpIGFzIHVua25vd24pIGFzIFJlYWRtZU1hcmtkb3duO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIHtpc01vYmlsZSA/IChcbiAgICAgICAgPE1vYmlsZUluc3RhbGxcbiAgICAgICAgICBjb21wb25lbnQ9e2NvbXBvbmVudH1cbiAgICAgICAgICB2ZXJzaW9uPXt2ZXJzaW9ufVxuICAgICAgICAgIGNoYW5nZWxvZz17Y2hhbmdlbG9nfVxuICAgICAgICAvPlxuICAgICAgKSA6IChcbiAgICAgICAgPERlc2t0b3BJbnN0YWxsXG4gICAgICAgICAgY29tcG9uZW50PXtjb21wb25lbnR9XG4gICAgICAgICAgdmVyc2lvbj17dmVyc2lvbn1cbiAgICAgICAgICBjaGFuZ2Vsb2c9e2NoYW5nZWxvZ31cbiAgICAgICAgLz5cbiAgICAgICl9XG4gICAgICA8R3JpZENvbnRhaW5lclxuICAgICAgICBhbGlnbj1cImZsZXgtc3RhcnRcIlxuICAgICAgICBqdXN0aWZ5PVwiZmxleC1zdGFydFwiXG4gICAgICAgIGNsYXNzTmFtZT17bWF4V2lkdGh9XG4gICAgICA+XG4gICAgICAgIDxHcmlkSXRlbSBzbT17MTJ9IG1kPXsxMn0geGw9ezEyfT5cbiAgICAgICAgICA8VGFic1xuICAgICAgICAgICAgY2xhc3NOYW1lPXt0YWJzUGFkZGluZ31cbiAgICAgICAgICAgIGFyaWEtbGFiZWw9e2BWaWV3IHNvdXJjZSBjb2RlIGZvciAke2NvbXBvbmVudH0gY29tcG9uZW50YH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7ZXhhbXBsZSAmJiAoXG4gICAgICAgICAgICAgIDxUYWIgZGVmYXVsdCBuYW1lPVwiRXhhbXBsZVwiIGNsYXNzTmFtZT17bXQzfT5cbiAgICAgICAgICAgICAgICA8Q29kZSBzaG93TGluZU51bWJlcnMgbGFuZ3VhZ2U9XCJqc1wiPlxuICAgICAgICAgICAgICAgICAge2V4YW1wbGV9XG4gICAgICAgICAgICAgICAgPC9Db2RlPlxuICAgICAgICAgICAgICA8L1RhYj5cbiAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgIHtvdXRwdXRIVE1MICYmIChcbiAgICAgICAgICAgICAgPFRhYiBuYW1lPVwiT3V0cHV0IEhUTUxcIiBjbGFzc05hbWU9e210M30gZGVmYXVsdD17IWV4YW1wbGV9PlxuICAgICAgICAgICAgICAgIDxDb2RlIHNob3dMaW5lTnVtYmVycyBsYW5ndWFnZT1cInhtbFwiPlxuICAgICAgICAgICAgICAgICAge291dHB1dEhUTUx9XG4gICAgICAgICAgICAgICAgPC9Db2RlPlxuICAgICAgICAgICAgICA8L1RhYj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9UYWJzPlxuICAgICAgICA8L0dyaWRJdGVtPlxuICAgICAgPC9HcmlkQ29udGFpbmVyPlxuICAgICAgPEdyaWRDb250YWluZXIgYWxpZ249XCJmbGV4LXN0YXJ0XCIganVzdGlmeT1cImZsZXgtc3RhcnRcIj5cbiAgICAgICAgPEdyaWRJdGVtIHNtPXsxMn0gbWQ9ezEyfSB4bD17MTJ9PlxuICAgICAgICAgIDxQcm9wVGFibGUgbWFya2Rvd25Bc3Q9e21hcmtkb3duQXN0fSBjb21wb25lbnQ9e2NvbXBvbmVudH0gLz5cbiAgICAgICAgICA8VHlwZURlZmluaXRpb24gbWFya2Rvd25Bc3Q9e21hcmtkb3duQXN0fSByZWFkbWU9e3JlYWRtZX0gLz5cbiAgICAgICAgPC9HcmlkSXRlbT5cbiAgICAgIDwvR3JpZENvbnRhaW5lcj5cbiAgICA8Lz5cbiAgKTtcbn1cblxuQ29kZURvY3MuZGlzcGxheU5hbWUgPSAnQ29kZURvY3MnO1xuXG5leHBvcnQgZGVmYXVsdCBDb2RlRG9jcztcbiJdfQ== */\",\n      toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n    }),\n    open: openModal,\n    setOpen: setOpenModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"div\", {\n    className: changelogStyles,\n    dangerouslySetInnerHTML: {\n      __html: changelog\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(VersionCard, \"uYk1wngonhmNAAo8U/frFfYvuzQ=\");\n\n_c = VersionCard;\nVersionCard.displayName = 'VersionCard';\n\nfunction MobileInstall(_ref2) {\n  var component = _ref2.component,\n      version = _ref2.version,\n      changelog = _ref2.changelog;\n  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(components_Grid__WEBPACK_IMPORTED_MODULE_17__[\"GridContainer\"], {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(components_Grid__WEBPACK_IMPORTED_MODULE_17__[\"GridItem\"], {\n    sm: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"div\", {\n    className: mobileInstallMargin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_leafygreen_ui_typography__WEBPACK_IMPORTED_MODULE_12__[\"Subtitle\"], {\n    as: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }, \"Installation\"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_leafygreen_ui_typography__WEBPACK_IMPORTED_MODULE_12__[\"Body\"], {\n    weight: \"medium\",\n    className: mt3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }, \"Yarn\"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_leafygreen_ui_copyable__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n    className: copyableStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }, \"yarn add @leafygreen-ui/\".concat(component)), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_leafygreen_ui_typography__WEBPACK_IMPORTED_MODULE_12__[\"Body\"], {\n    weight: \"medium\",\n    className: mt3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }, \"NPM\"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_leafygreen_ui_copyable__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n    className: copyableStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }, \"npm install @leafygreen-ui/\".concat(component)))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(components_Grid__WEBPACK_IMPORTED_MODULE_17__[\"GridItem\"], {\n    sm: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(VersionCard, {\n    version: version,\n    changelog: changelog,\n    isMobile: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  }))));\n}\n\n_c2 = MobileInstall;\nMobileInstall.displayName = 'MobileInstall';\n\nfunction DesktopInstall(_ref3) {\n  var component = _ref3.component,\n      changelog = _ref3.changelog,\n      version = _ref3.version;\n  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(components_Grid__WEBPACK_IMPORTED_MODULE_17__[\"GridContainer\"], {\n    justify: \"space-between\",\n    align: \"flex-start\",\n    className: maxWidth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(components_Grid__WEBPACK_IMPORTED_MODULE_17__[\"GridItem\"], {\n    md: 7,\n    lg: 7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"div\", {\n    className: topAlignment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_leafygreen_ui_typography__WEBPACK_IMPORTED_MODULE_12__[\"Subtitle\"], {\n    as: \"h2\",\n    className:\n    /*#__PURE__*/\n\n    /*#__PURE__*/\n    Object(_emotion_css__WEBPACK_IMPORTED_MODULE_2__[\"css\"])(\"margin-bottom:\", _leafygreen_ui_tokens__WEBPACK_IMPORTED_MODULE_14__[\"spacing\"][3], \"px;\" + (false ? undefined : \";label:DesktopInstall;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZlbWNjYXJ0aHkvUmVwb3NpdG9yaWVzL01vbmdvREIvbGVhZnlncmVlbi11aS93ZWJzaXRlL2NvbXBvbmVudHMvQ29kZURvY3MudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtMNEIiLCJmaWxlIjoiL1VzZXJzL2RhdmVtY2NhcnRoeS9SZXBvc2l0b3JpZXMvTW9uZ29EQi9sZWFmeWdyZWVuLXVpL3dlYnNpdGUvY29tcG9uZW50cy9Db2RlRG9jcy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MsIGN4IH0gZnJvbSAnQGVtb3Rpb24vY3NzJztcbmltcG9ydCB1bmlmaWVkIGZyb20gJ3VuaWZpZWQnO1xuaW1wb3J0IG1hcmtkb3duIGZyb20gJ3JlbWFyay1wYXJzZSc7XG5pbXBvcnQgQWN0aXZpdHlGZWVkSWNvbiBmcm9tICdAbGVhZnlncmVlbi11aS9pY29uL2Rpc3QvQWN0aXZpdHlGZWVkJztcbmltcG9ydCBCdXR0b24gZnJvbSAnQGxlYWZ5Z3JlZW4tdWkvYnV0dG9uJztcbmltcG9ydCBDYXJkIGZyb20gJ0BsZWFmeWdyZWVuLXVpL2NhcmQnO1xuaW1wb3J0IENvZGUgZnJvbSAnQGxlYWZ5Z3JlZW4tdWkvY29kZSc7XG5pbXBvcnQgQ29weWFibGUgZnJvbSAnQGxlYWZ5Z3JlZW4tdWkvY29weWFibGUnO1xuaW1wb3J0IE1vZGFsIGZyb20gJ0BsZWFmeWdyZWVuLXVpL21vZGFsJztcbmltcG9ydCB7IFRhYnMsIFRhYiB9IGZyb20gJ0BsZWFmeWdyZWVuLXVpL3RhYnMnO1xuaW1wb3J0IHsgU3VidGl0bGUsIEJvZHkgfSBmcm9tICdAbGVhZnlncmVlbi11aS90eXBvZ3JhcGh5JztcbmltcG9ydCB7IHVpQ29sb3JzIH0gZnJvbSAnQGxlYWZ5Z3JlZW4tdWkvcGFsZXR0ZSc7XG5pbXBvcnQgeyBzcGFjaW5nLCBicmVha3BvaW50cyB9IGZyb20gJ0BsZWFmeWdyZWVuLXVpL3Rva2Vucyc7XG5pbXBvcnQgeyB1c2VWaWV3cG9ydFNpemUgfSBmcm9tICdAbGVhZnlncmVlbi11aS9ob29rcyc7XG5pbXBvcnQgeyBCYXNlTGF5b3V0UHJvcHMgfSBmcm9tICd1dGlscy90eXBlcyc7XG5pbXBvcnQgeyBwYWdlQ29udGFpbmVyV2lkdGggfSBmcm9tICdzdHlsZXMvY29uc3RhbnRzJztcbmltcG9ydCB7IEdyaWRDb250YWluZXIsIEdyaWRJdGVtIH0gZnJvbSAnY29tcG9uZW50cy9HcmlkJztcbmltcG9ydCBQcm9wVGFibGUsIHsgUmVhZG1lTWFya2Rvd24gfSBmcm9tICdjb21wb25lbnRzL1Byb3BUYWJsZSc7XG5pbXBvcnQgVHlwZURlZmluaXRpb24gZnJvbSAnY29tcG9uZW50cy9UeXBlRGVmaW5pdGlvbic7XG5cbmNvbnN0IHRvcEFsaWdubWVudCA9IGNzc2BcbiAgbWFyZ2luLXRvcDogJHtzcGFjaW5nWzRdfXB4O1xuICBwYWRkaW5nLXRvcDogJHtzcGFjaW5nWzNdfXB4O1xuICBtYXJnaW4tYm90dG9tOiAke3NwYWNpbmdbM119cHg7XG5gO1xuXG5jb25zdCB2ZXJzaW9uQ2FyZERlc2t0b3BNYXJnaW4gPSBjc3NgXG4gIG1hcmdpbi1sZWZ0OiAyMHB4O1xuYDtcblxuY29uc3QgbXQzID0gY3NzYFxuICBtYXJnaW4tdG9wOiAke3NwYWNpbmdbM119cHg7XG5gO1xuXG5jb25zdCBtYjEgPSBjc3NgXG4gIG1hcmdpbi1ib3R0b206ICR7c3BhY2luZ1sxXX1weDtcbmA7XG5cbmNvbnN0IGNvcHlhYmxlU3R5bGVzID0gY3NzYFxuICB3aWR0aDogMTAwJTtcbiAgbWF4LXdpZHRoOiA0MDBweDtcbmA7XG5cbmNvbnN0IHZlcnNpb25DYXJkID0gY3NzYFxuICBtaW4taGVpZ2h0OiAxMDZweDtcbiAgcGFkZGluZzogJHtzcGFjaW5nWzNdfXB4ICR7c3BhY2luZ1s0XX1weDtcbmA7XG5cbmNvbnN0IHN1YnRpdGxlUGFkZGluZyA9IGNzc2BcbiAgcGFkZGluZy1ib3R0b206ICR7c3BhY2luZ1szXX1weDtcbmA7XG5cbmNvbnN0IHRhYnNQYWRkaW5nID0gY3NzYFxuICBwYWRkaW5nLXRvcDogJHtzcGFjaW5nWzRdfXB4O1xuYDtcblxuY29uc3QgbW9iaWxlSW5zdGFsbE1hcmdpbiA9IGNzc2BcbiAgbWFyZ2luLXRvcDogNTBweDtcbiAgbWFyZ2luLWJvdHRvbTogJHtzcGFjaW5nWzNdfXB4O1xuYDtcblxuY29uc3QgY2hhbmdlbG9nU3R5bGVzID0gY3NzYFxuICBjb2xvcjogJHt1aUNvbG9ycy5ncmF5LmRhcmszfTtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG5cbiAgJiA+IGgyIHtcbiAgICBwYWRkaW5nLXRvcDogJHtzcGFjaW5nWzNdfXB4O1xuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAke3VpQ29sb3JzLmdyYXkubGlnaHQyfTtcbiAgfVxuXG4gIGEge1xuICAgIGNvbG9yOiAke3VpQ29sb3JzLmdyYXkuZGFyazN9O1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgfVxuYDtcblxuY29uc3QgbWF4V2lkdGggPSBjc3NgXG4gIG1heC13aWR0aDogJHtwYWdlQ29udGFpbmVyV2lkdGguZGVmYXVsdH1weDtcbmA7XG5cbmludGVyZmFjZSBWZXJzaW9uQ2FyZFByb3BzIHtcbiAgdmVyc2lvbj86IHN0cmluZztcbiAgY2hhbmdlbG9nOiBzdHJpbmc7XG4gIGlzTW9iaWxlPzogYm9vbGVhbjtcbn1cblxuaW50ZXJmYWNlIEluc3RhbGxQcm9wcyB7XG4gIGNvbXBvbmVudDogc3RyaW5nO1xuICB2ZXJzaW9uPzogc3RyaW5nO1xuICBjaGFuZ2Vsb2c6IHN0cmluZztcbn1cblxuZnVuY3Rpb24gVmVyc2lvbkNhcmQoe1xuICB2ZXJzaW9uLFxuICBjaGFuZ2Vsb2csXG4gIGlzTW9iaWxlID0gZmFsc2UsXG59OiBWZXJzaW9uQ2FyZFByb3BzKSB7XG4gIGNvbnN0IFtvcGVuTW9kYWwsIHNldE9wZW5Nb2RhbF0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgcmV0dXJuIChcbiAgICA8Q2FyZCBjbGFzc05hbWU9e2N4KHRvcEFsaWdubWVudCwgdmVyc2lvbkNhcmQpfT5cbiAgICAgIDxTdWJ0aXRsZSBhcz1cImgyXCIgY2xhc3NOYW1lPXtzdWJ0aXRsZVBhZGRpbmd9PlxuICAgICAgICBWZXJzaW9uIHt2ZXJzaW9ufVxuICAgICAgPC9TdWJ0aXRsZT5cbiAgICAgIDxCdXR0b25cbiAgICAgICAgc2l6ZT17aXNNb2JpbGUgPyAnbGFyZ2UnIDogJ2RlZmF1bHQnfVxuICAgICAgICBsZWZ0R2x5cGg9ezxBY3Rpdml0eUZlZWRJY29uIC8+fVxuICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRPcGVuTW9kYWwoY3VyciA9PiAhY3Vycil9XG4gICAgICAgIGNsYXNzTmFtZT17Y3goe1xuICAgICAgICAgIFtjc3NgXG4gICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBgXTogaXNNb2JpbGUsXG4gICAgICAgIH0pfVxuICAgICAgPlxuICAgICAgICBWaWV3IENoYW5nZWxvZ1xuICAgICAgPC9CdXR0b24+XG4gICAgICA8TW9kYWxcbiAgICAgICAgY2xhc3NOYW1lPXtjc3NgXG4gICAgICAgICAgei1pbmRleDogMTtcbiAgICAgICAgYH1cbiAgICAgICAgb3Blbj17b3Blbk1vZGFsfVxuICAgICAgICBzZXRPcGVuPXtzZXRPcGVuTW9kYWx9XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzc05hbWU9e2NoYW5nZWxvZ1N0eWxlc31cbiAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IGNoYW5nZWxvZyB9fVxuICAgICAgICA+PC9kaXY+XG4gICAgICA8L01vZGFsPlxuICAgIDwvQ2FyZD5cbiAgKTtcbn1cblxuVmVyc2lvbkNhcmQuZGlzcGxheU5hbWUgPSAnVmVyc2lvbkNhcmQnO1xuXG5mdW5jdGlvbiBNb2JpbGVJbnN0YWxsKHsgY29tcG9uZW50LCB2ZXJzaW9uLCBjaGFuZ2Vsb2cgfTogSW5zdGFsbFByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPEdyaWRDb250YWluZXI+XG4gICAgICA8R3JpZEl0ZW0gc209ezEyfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e21vYmlsZUluc3RhbGxNYXJnaW59PlxuICAgICAgICAgIDxTdWJ0aXRsZSBhcz1cImgyXCI+SW5zdGFsbGF0aW9uPC9TdWJ0aXRsZT5cbiAgICAgICAgICA8Qm9keSB3ZWlnaHQ9XCJtZWRpdW1cIiBjbGFzc05hbWU9e210M30+XG4gICAgICAgICAgICBZYXJuXG4gICAgICAgICAgPC9Cb2R5PlxuICAgICAgICAgIDxDb3B5YWJsZVxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjb3B5YWJsZVN0eWxlc31cbiAgICAgICAgICA+e2B5YXJuIGFkZCBAbGVhZnlncmVlbi11aS8ke2NvbXBvbmVudH1gfTwvQ29weWFibGU+XG4gICAgICAgICAgPEJvZHkgd2VpZ2h0PVwibWVkaXVtXCIgY2xhc3NOYW1lPXttdDN9PlxuICAgICAgICAgICAgTlBNXG4gICAgICAgICAgPC9Cb2R5PlxuICAgICAgICAgIDxDb3B5YWJsZVxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjb3B5YWJsZVN0eWxlc31cbiAgICAgICAgICA+e2BucG0gaW5zdGFsbCBAbGVhZnlncmVlbi11aS8ke2NvbXBvbmVudH1gfTwvQ29weWFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9HcmlkSXRlbT5cbiAgICAgIDxHcmlkSXRlbSBzbT17MTJ9PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxWZXJzaW9uQ2FyZCB2ZXJzaW9uPXt2ZXJzaW9ufSBjaGFuZ2Vsb2c9e2NoYW5nZWxvZ30gaXNNb2JpbGUgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L0dyaWRJdGVtPlxuICAgIDwvR3JpZENvbnRhaW5lcj5cbiAgKTtcbn1cblxuTW9iaWxlSW5zdGFsbC5kaXNwbGF5TmFtZSA9ICdNb2JpbGVJbnN0YWxsJztcblxuZnVuY3Rpb24gRGVza3RvcEluc3RhbGwoeyBjb21wb25lbnQsIGNoYW5nZWxvZywgdmVyc2lvbiB9OiBJbnN0YWxsUHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPEdyaWRDb250YWluZXJcbiAgICAgICAganVzdGlmeT1cInNwYWNlLWJldHdlZW5cIlxuICAgICAgICBhbGlnbj1cImZsZXgtc3RhcnRcIlxuICAgICAgICBjbGFzc05hbWU9e21heFdpZHRofVxuICAgICAgPlxuICAgICAgICA8R3JpZEl0ZW0gbWQ9ezd9IGxnPXs3fT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17dG9wQWxpZ25tZW50fT5cbiAgICAgICAgICAgIDxTdWJ0aXRsZVxuICAgICAgICAgICAgICBhcz1cImgyXCJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjc3NgXG4gICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogJHtzcGFjaW5nWzNdfXB4O1xuICAgICAgICAgICAgICBgfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICBJbnN0YWxsYXRpb25cbiAgICAgICAgICAgIDwvU3VidGl0bGU+XG4gICAgICAgICAgICA8Qm9keSB3ZWlnaHQ9XCJtZWRpdW1cIiBjbGFzc05hbWU9e21iMX0+XG4gICAgICAgICAgICAgIFlhcm5cbiAgICAgICAgICAgIDwvQm9keT5cbiAgICAgICAgICAgIDxDb3B5YWJsZT57YHlhcm4gYWRkIEBsZWFmeWdyZWVuLXVpLyR7Y29tcG9uZW50fWB9PC9Db3B5YWJsZT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9HcmlkSXRlbT5cbiAgICAgICAgPEdyaWRJdGVtIG1kPXs1fSBsZz17NX0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3ZlcnNpb25DYXJkRGVza3RvcE1hcmdpbn0+XG4gICAgICAgICAgICA8VmVyc2lvbkNhcmQgY2hhbmdlbG9nPXtjaGFuZ2Vsb2d9IHZlcnNpb249e3ZlcnNpb259IC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvR3JpZEl0ZW0+XG4gICAgICA8L0dyaWRDb250YWluZXI+XG4gICAgICA8R3JpZENvbnRhaW5lciBhbGlnbj1cImZsZXgtc3RhcnRcIiBqdXN0aWZ5PVwiZmxleC1zdGFydFwiPlxuICAgICAgICA8R3JpZEl0ZW0gbWQ9ezd9IGxnPXs3fT5cbiAgICAgICAgICA8Qm9keSB3ZWlnaHQ9XCJtZWRpdW1cIiBjbGFzc05hbWU9e21iMX0+XG4gICAgICAgICAgICBOUE1cbiAgICAgICAgICA8L0JvZHk+XG4gICAgICAgICAgPENvcHlhYmxlPntgbnBtIGluc3RhbGwgQGxlYWZ5Z3JlZW4tdWkvJHtjb21wb25lbnR9YH08L0NvcHlhYmxlPlxuICAgICAgICA8L0dyaWRJdGVtPlxuICAgICAgPC9HcmlkQ29udGFpbmVyPlxuICAgIDwvPlxuICApO1xufVxuXG5EZXNrdG9wSW5zdGFsbC5kaXNwbGF5TmFtZSA9ICdEZXNrdG9wSW5zdGFsbCc7XG5cbmZ1bmN0aW9uIENvZGVEb2NzKHsgY29tcG9uZW50LCByZWFkbWUsIGNoYW5nZWxvZyB9OiBCYXNlTGF5b3V0UHJvcHMpIHtcbiAgY29uc3Qgdmlld3BvcnQgPSB1c2VWaWV3cG9ydFNpemUoKTtcbiAgY29uc3QgaXNNb2JpbGUgPSB2aWV3cG9ydD8ud2lkdGhcbiAgICA/IHZpZXdwb3J0Py53aWR0aCA8IGJyZWFrcG9pbnRzLlRhYmxldFxuICAgIDogZmFsc2U7XG5cbiAgY29uc3QgdmVyc2lvbiA9IGNoYW5nZWxvZz8uc3BsaXQoJ2gyJylbMV0/LnJlcGxhY2UoL1s+LzxdKy9nLCAnJyk7XG4gIGNvbnN0IGV4YW1wbGUgPSByZWFkbWU/LnNwbGl0KCdqcycpWzFdPy5zcGxpdCgnYGBgJylbMF0/LnRyaW1TdGFydCgpO1xuICBjb25zdCBvdXRwdXRIVE1MID0gcmVhZG1lPy5zcGxpdCgnYGBgaHRtbCcpWzFdPy5zcGxpdCgnYGBgJylbMF0/LnRyaW1TdGFydCgpO1xuXG4gIGNvbnNvbGUubG9nKHVuaWZpZWQoKVxuICAudXNlKG1hcmtkb3duKVxuICAucGFyc2UocmVhZG1lKSlcblxuICBjb25zdCBtYXJrZG93bkFzdCA9ICh1bmlmaWVkKClcbiAgICAudXNlKG1hcmtkb3duKVxuICAgIC5wYXJzZShyZWFkbWUpIGFzIHVua25vd24pIGFzIFJlYWRtZU1hcmtkb3duO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIHtpc01vYmlsZSA/IChcbiAgICAgICAgPE1vYmlsZUluc3RhbGxcbiAgICAgICAgICBjb21wb25lbnQ9e2NvbXBvbmVudH1cbiAgICAgICAgICB2ZXJzaW9uPXt2ZXJzaW9ufVxuICAgICAgICAgIGNoYW5nZWxvZz17Y2hhbmdlbG9nfVxuICAgICAgICAvPlxuICAgICAgKSA6IChcbiAgICAgICAgPERlc2t0b3BJbnN0YWxsXG4gICAgICAgICAgY29tcG9uZW50PXtjb21wb25lbnR9XG4gICAgICAgICAgdmVyc2lvbj17dmVyc2lvbn1cbiAgICAgICAgICBjaGFuZ2Vsb2c9e2NoYW5nZWxvZ31cbiAgICAgICAgLz5cbiAgICAgICl9XG4gICAgICA8R3JpZENvbnRhaW5lclxuICAgICAgICBhbGlnbj1cImZsZXgtc3RhcnRcIlxuICAgICAgICBqdXN0aWZ5PVwiZmxleC1zdGFydFwiXG4gICAgICAgIGNsYXNzTmFtZT17bWF4V2lkdGh9XG4gICAgICA+XG4gICAgICAgIDxHcmlkSXRlbSBzbT17MTJ9IG1kPXsxMn0geGw9ezEyfT5cbiAgICAgICAgICA8VGFic1xuICAgICAgICAgICAgY2xhc3NOYW1lPXt0YWJzUGFkZGluZ31cbiAgICAgICAgICAgIGFyaWEtbGFiZWw9e2BWaWV3IHNvdXJjZSBjb2RlIGZvciAke2NvbXBvbmVudH0gY29tcG9uZW50YH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7ZXhhbXBsZSAmJiAoXG4gICAgICAgICAgICAgIDxUYWIgZGVmYXVsdCBuYW1lPVwiRXhhbXBsZVwiIGNsYXNzTmFtZT17bXQzfT5cbiAgICAgICAgICAgICAgICA8Q29kZSBzaG93TGluZU51bWJlcnMgbGFuZ3VhZ2U9XCJqc1wiPlxuICAgICAgICAgICAgICAgICAge2V4YW1wbGV9XG4gICAgICAgICAgICAgICAgPC9Db2RlPlxuICAgICAgICAgICAgICA8L1RhYj5cbiAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgIHtvdXRwdXRIVE1MICYmIChcbiAgICAgICAgICAgICAgPFRhYiBuYW1lPVwiT3V0cHV0IEhUTUxcIiBjbGFzc05hbWU9e210M30gZGVmYXVsdD17IWV4YW1wbGV9PlxuICAgICAgICAgICAgICAgIDxDb2RlIHNob3dMaW5lTnVtYmVycyBsYW5ndWFnZT1cInhtbFwiPlxuICAgICAgICAgICAgICAgICAge291dHB1dEhUTUx9XG4gICAgICAgICAgICAgICAgPC9Db2RlPlxuICAgICAgICAgICAgICA8L1RhYj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9UYWJzPlxuICAgICAgICA8L0dyaWRJdGVtPlxuICAgICAgPC9HcmlkQ29udGFpbmVyPlxuICAgICAgPEdyaWRDb250YWluZXIgYWxpZ249XCJmbGV4LXN0YXJ0XCIganVzdGlmeT1cImZsZXgtc3RhcnRcIj5cbiAgICAgICAgPEdyaWRJdGVtIHNtPXsxMn0gbWQ9ezEyfSB4bD17MTJ9PlxuICAgICAgICAgIDxQcm9wVGFibGUgbWFya2Rvd25Bc3Q9e21hcmtkb3duQXN0fSBjb21wb25lbnQ9e2NvbXBvbmVudH0gLz5cbiAgICAgICAgICA8VHlwZURlZmluaXRpb24gbWFya2Rvd25Bc3Q9e21hcmtkb3duQXN0fSByZWFkbWU9e3JlYWRtZX0gLz5cbiAgICAgICAgPC9HcmlkSXRlbT5cbiAgICAgIDwvR3JpZENvbnRhaW5lcj5cbiAgICA8Lz5cbiAgKTtcbn1cblxuQ29kZURvY3MuZGlzcGxheU5hbWUgPSAnQ29kZURvY3MnO1xuXG5leHBvcnQgZGVmYXVsdCBDb2RlRG9jcztcbiJdfQ== */\", false ? undefined : \";label:DesktopInstall;\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  }, \"Installation\"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_leafygreen_ui_typography__WEBPACK_IMPORTED_MODULE_12__[\"Body\"], {\n    weight: \"medium\",\n    className: mb1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  }, \"Yarn\"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_leafygreen_ui_copyable__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }, \"yarn add @leafygreen-ui/\".concat(component)))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(components_Grid__WEBPACK_IMPORTED_MODULE_17__[\"GridItem\"], {\n    md: 5,\n    lg: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"div\", {\n    className: versionCardDesktopMargin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 11\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(VersionCard, {\n    changelog: changelog,\n    version: version,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }\n  })))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(components_Grid__WEBPACK_IMPORTED_MODULE_17__[\"GridContainer\"], {\n    align: \"flex-start\",\n    justify: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(components_Grid__WEBPACK_IMPORTED_MODULE_17__[\"GridItem\"], {\n    md: 7,\n    lg: 7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_leafygreen_ui_typography__WEBPACK_IMPORTED_MODULE_12__[\"Body\"], {\n    weight: \"medium\",\n    className: mb1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 11\n    }\n  }, \"NPM\"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_leafygreen_ui_copyable__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 11\n    }\n  }, \"npm install @leafygreen-ui/\".concat(component)))));\n}\n\n_c3 = DesktopInstall;\nDesktopInstall.displayName = 'DesktopInstall';\n\nfunction CodeDocs(_ref4) {\n  _s2();\n\n  var _changelog$split$, _readme$split$, _readme$split$$split$, _readme$split$2, _readme$split$2$split;\n\n  var component = _ref4.component,\n      readme = _ref4.readme,\n      changelog = _ref4.changelog;\n  var viewport = Object(_leafygreen_ui_hooks__WEBPACK_IMPORTED_MODULE_15__[\"useViewportSize\"])();\n  var isMobile = viewport !== null && viewport !== void 0 && viewport.width ? (viewport === null || viewport === void 0 ? void 0 : viewport.width) < _leafygreen_ui_tokens__WEBPACK_IMPORTED_MODULE_14__[\"breakpoints\"].Tablet : false;\n  var version = changelog === null || changelog === void 0 ? void 0 : (_changelog$split$ = changelog.split('h2')[1]) === null || _changelog$split$ === void 0 ? void 0 : _changelog$split$.replace(/[>/<]+/g, '');\n  var example = readme === null || readme === void 0 ? void 0 : (_readme$split$ = readme.split('js')[1]) === null || _readme$split$ === void 0 ? void 0 : (_readme$split$$split$ = _readme$split$.split('```')[0]) === null || _readme$split$$split$ === void 0 ? void 0 : _readme$split$$split$.trimStart();\n  var outputHTML = readme === null || readme === void 0 ? void 0 : (_readme$split$2 = readme.split('```html')[1]) === null || _readme$split$2 === void 0 ? void 0 : (_readme$split$2$split = _readme$split$2.split('```')[0]) === null || _readme$split$2$split === void 0 ? void 0 : _readme$split$2$split.trimStart();\n  console.log(unified__WEBPACK_IMPORTED_MODULE_3___default()().use(remark_parse__WEBPACK_IMPORTED_MODULE_4___default.a).parse(readme));\n  var markdownAst = unified__WEBPACK_IMPORTED_MODULE_3___default()().use(remark_parse__WEBPACK_IMPORTED_MODULE_4___default.a).parse(readme);\n  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null, isMobile ? Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(MobileInstall, {\n    component: component,\n    version: version,\n    changelog: changelog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }\n  }) : Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(DesktopInstall, {\n    component: component,\n    version: version,\n    changelog: changelog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }\n  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(components_Grid__WEBPACK_IMPORTED_MODULE_17__[\"GridContainer\"], {\n    align: \"flex-start\",\n    justify: \"flex-start\",\n    className: maxWidth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(components_Grid__WEBPACK_IMPORTED_MODULE_17__[\"GridItem\"], {\n    sm: 12,\n    md: 12,\n    xl: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 9\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_leafygreen_ui_tabs__WEBPACK_IMPORTED_MODULE_11__[\"Tabs\"], {\n    className: tabsPadding,\n    \"aria-label\": \"View source code for \".concat(component, \" component\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 11\n    }\n  }, example && Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_leafygreen_ui_tabs__WEBPACK_IMPORTED_MODULE_11__[\"Tab\"], {\n    \"default\": true,\n    name: \"Example\",\n    className: mt3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 15\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_leafygreen_ui_code__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n    showLineNumbers: true,\n    language: \"js\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 17\n    }\n  }, example)), outputHTML && Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_leafygreen_ui_tabs__WEBPACK_IMPORTED_MODULE_11__[\"Tab\"], {\n    name: \"Output HTML\",\n    className: mt3,\n    \"default\": !example,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 15\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_leafygreen_ui_code__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n    showLineNumbers: true,\n    language: \"xml\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 17\n    }\n  }, outputHTML))))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(components_Grid__WEBPACK_IMPORTED_MODULE_17__[\"GridContainer\"], {\n    align: \"flex-start\",\n    justify: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(components_Grid__WEBPACK_IMPORTED_MODULE_17__[\"GridItem\"], {\n    sm: 12,\n    md: 12,\n    xl: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 9\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(components_PropTable__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n    markdownAst: markdownAst,\n    component: component,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 11\n    }\n  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(components_TypeDefinition__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n    markdownAst: markdownAst,\n    readme: readme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 11\n    }\n  }))));\n}\n\n_s2(CodeDocs, \"vwbeZAB0yBqiSQlG2n5ytTpw5es=\", false, function () {\n  return [_leafygreen_ui_hooks__WEBPACK_IMPORTED_MODULE_15__[\"useViewportSize\"]];\n});\n\n_c4 = CodeDocs;\nCodeDocs.displayName = 'CodeDocs';\n/* harmony default export */ __webpack_exports__[\"default\"] = (CodeDocs);\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"VersionCard\");\n$RefreshReg$(_c2, \"MobileInstall\");\n$RefreshReg$(_c3, \"DesktopInstall\");\n$RefreshReg$(_c4, \"CodeDocs\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/next/node_modules/webpack/buildin/harmony-module.js */ \"../node_modules/next/node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/CodeDocs.tsx\n");

/***/ })

})